{
  "address": "0x296D5897d521Abfd9cE9cC7c3592e302b7C6CB80",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "initialSupply_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feeReceiver_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapRouter_",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "collectors_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidShortString",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "excluded",
          "type": "bool"
        }
      ],
      "name": "ExcludedFromFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "FeeCollectorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "FeeCollectorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newShare",
          "type": "uint256"
        }
      ],
      "name": "FeeCollectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "feesInToken",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "buyFees",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "sellFees",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "transferFees",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "burnFeeRatio",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "liquidityFeeRatio",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "collectorsFeeRatio",
              "type": "uint16"
            }
          ],
          "indexed": false,
          "internalType": "struct TaxableToken.FeeConfiguration",
          "name": "configuration",
          "type": "tuple"
        }
      ],
      "name": "FeeConfigurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLp",
          "type": "bool"
        }
      ],
      "name": "SetLpPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "SwapRouterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "updater",
          "type": "address"
        }
      ],
      "name": "TaxRateUpdaterChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BURN_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLOCK_MODE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_PRECISION",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_COLLECTORS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "addFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoProcessFees",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "pos",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fromBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint224",
              "name": "votes",
              "type": "uint224"
            }
          ],
          "internalType": "struct ERC20Votes.Checkpoint",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clock",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "inToken",
          "type": "bool"
        }
      ],
      "name": "distributeFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "feeCollectorShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "feeCollectors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeConfiguration",
      "outputs": [
        {
          "internalType": "bool",
          "name": "feesInToken",
          "type": "bool"
        },
        {
          "internalType": "uint16",
          "name": "buyFees",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "sellFees",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "transferFees",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "burnFeeRatio",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "liquidityFeeRatio",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "collectorsFeeRatio",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timepoint",
          "type": "uint256"
        }
      ],
      "name": "getPastTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timepoint",
          "type": "uint256"
        }
      ],
      "name": "getPastVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isExcludedFromFees",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isFeeCollector",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        }
      ],
      "name": "isLpPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numTokensToSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "processFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "autoProcess",
          "type": "bool"
        }
      ],
      "name": "setAutoprocessFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "feesInToken",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "buyFees",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "sellFees",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "transferFees",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "burnFeeRatio",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "liquidityFeeRatio",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "collectorsFeeRatio",
              "type": "uint16"
            }
          ],
          "internalType": "struct TaxableToken.FeeConfiguration",
          "name": "configuration",
          "type": "tuple"
        }
      ],
      "name": "setFeeConfiguration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "excluded",
          "type": "bool"
        }
      ],
      "name": "setIsExcludedFromFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isLp",
          "type": "bool"
        }
      ],
      "name": "setIsLpPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setLiquidityOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setNumTokensToSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRouter",
          "type": "address"
        }
      ],
      "name": "setSwapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "updater",
          "type": "address"
        }
      ],
      "name": "setTaxRateUpdater",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "buyRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellRate",
          "type": "uint256"
        }
      ],
      "name": "setTaxRates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taxRateUpdater",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFeeCollectorsShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "updateFeeCollectorShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbfec428580d196e0a524dc4eb47b81676884bb2daaa72ae794931fccbea44b4c",
  "receipt": {
    "to": null,
    "from": "0xf8492AfeDC885ef3d443F0f51B81B7e70fBCd516",
    "contractAddress": "0x296D5897d521Abfd9cE9cC7c3592e302b7C6CB80",
    "transactionIndex": 16,
    "gasUsed": "4463525",
    "logsBloom": "0x
    "blockHash": "0xea0aa2916e8587909f089486a2383205d6d8c5f52071f53ec45b318322176a1b",
    "transactionHash": "0xbfec428580d196e0a524dc4eb47b81676884bb2daaa72ae794931fccbea44b4c",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 27597868,
        "transactionHash": "0xbfec428580d196e0a524dc4eb47b81676884bb2daaa72ae794931fccbea44b4c",
        "address": "0x296D5897d521Abfd9cE9cC7c3592e302b7C6CB80",
        "topics": [
          "0x918584c21fe4a093f5014c0dabaed3e43b642781e27984aef122cae8245fbb23",
          "0x000000000000000000000000be94738c517e3f71475ef68ad62215c38949ca58"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000064",
        "logIndex": 117,
        "blockHash": "0xea0aa2916e8587909f089486a2383205d6d8c5f52071f53ec45b318322176a1b"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 27597868,
        "transactionHash": "0xbfec428580d196e0a524dc4eb47b81676884bb2daaa72ae794931fccbea44b4c",
        "address": "0x296D5897d521Abfd9cE9cC7c3592e302b7C6CB80",
        "topics": [
          "0x3499bfcf9673677ba552f3fe2ea274ec7e6246da31c3c87e115b45a9b0db2efb",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 118,
        "blockHash": "0xea0aa2916e8587909f089486a2383205d6d8c5f52071f53ec45b318322176a1b"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 27597868,
        "transactionHash": "0xbfec428580d196e0a524dc4eb47b81676884bb2daaa72ae794931fccbea44b4c",
        "address": "0x296D5897d521Abfd9cE9cC7c3592e302b7C6CB80",
        "topics": [
          "0x3499bfcf9673677ba552f3fe2ea274ec7e6246da31c3c87e115b45a9b0db2efb",
          "0x000000000000000000000000000000000000000000000000000000000000dead"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 119,
        "blockHash": "0xea0aa2916e8587909f089486a2383205d6d8c5f52071f53ec45b318322176a1b"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 27597868,
        "transactionHash": "0xbfec428580d196e0a524dc4eb47b81676884bb2daaa72ae794931fccbea44b4c",
        "address": "0x296D5897d521Abfd9cE9cC7c3592e302b7C6CB80",
        "topics": [
          "0x3499bfcf9673677ba552f3fe2ea274ec7e6246da31c3c87e115b45a9b0db2efb",
          "0x000000000000000000000000296d5897d521abfd9ce9cc7c3592e302b7c6cb80"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 120,
        "blockHash": "0xea0aa2916e8587909f089486a2383205d6d8c5f52071f53ec45b318322176a1b"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 27597868,
        "transactionHash": "0xbfec428580d196e0a524dc4eb47b81676884bb2daaa72ae794931fccbea44b4c",
        "address": "0x296D5897d521Abfd9cE9cC7c3592e302b7C6CB80",
        "topics": [
          "0x3499bfcf9673677ba552f3fe2ea274ec7e6246da31c3c87e115b45a9b0db2efb",
          "0x000000000000000000000000f8492afedc885ef3d443f0f51b81b7e70fbcd516"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 121,
        "blockHash": "0xea0aa2916e8587909f089486a2383205d6d8c5f52071f53ec45b318322176a1b"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 27597868,
        "transactionHash": "0xbfec428580d196e0a524dc4eb47b81676884bb2daaa72ae794931fccbea44b4c",
        "address": "0x296D5897d521Abfd9cE9cC7c3592e302b7C6CB80",
        "topics": [
          "0xf34b49a91d91598b7774795175736ebf4db4fa5a4edf72772cf50fb27c135efd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013880000000000000000000000000000000000000000000000000000000000001388",
        "logIndex": 122,
        "blockHash": "0xea0aa2916e8587909f089486a2383205d6d8c5f52071f53ec45b318322176a1b"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 27597868,
        "transactionHash": "0xbfec428580d196e0a524dc4eb47b81676884bb2daaa72ae794931fccbea44b4c",
        "address": "0x296D5897d521Abfd9cE9cC7c3592e302b7C6CB80",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f8492afedc885ef3d443f0f51b81b7e70fbcd516"
        ],
        "data": "0x",
        "logIndex": 123,
        "blockHash": "0xea0aa2916e8587909f089486a2383205d6d8c5f52071f53ec45b318322176a1b"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 27597868,
        "transactionHash": "0xbfec428580d196e0a524dc4eb47b81676884bb2daaa72ae794931fccbea44b4c",
        "address": "0x296D5897d521Abfd9cE9cC7c3592e302b7C6CB80",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f8492afedc885ef3d443f0f51b81b7e70fbcd516"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 124,
        "blockHash": "0xea0aa2916e8587909f089486a2383205d6d8c5f52071f53ec45b318322176a1b"
      }
    ],
    "blockNumber": 27597868,
    "cumulativeGasUsed": "9910972",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1000000000000000000",
    "0xf8492AfeDC885ef3d443F0f51B81B7e70fBCd516",
    "0x1689E7B1F10000AE47eBfE339a4f69dECd19F602",
    [
      "0xBe94738C517E3f71475EF68AD62215c38949cA58"
    ],
    [
      100
    ]
  ],
  "numDeployments": 2,
  "solcInputHash": "8a4f155ca285c8448eac131347cea9e7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReceiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouter_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"collectors_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"ExcludedFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"FeeCollectorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FeeCollectorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newShare\",\"type\":\"uint256\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"feesInToken\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"buyFees\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFees\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"transferFees\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"burnFeeRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidityFeeRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"collectorsFeeRatio\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct TaxableToken.FeeConfiguration\",\"name\":\"configuration\",\"type\":\"tuple\"}],\"name\":\"FeeConfigurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLp\",\"type\":\"bool\"}],\"name\":\"SetLpPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"SwapRouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"}],\"name\":\"TaxRateUpdaterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_PRECISION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_COLLECTORS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"addFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoProcessFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"internalType\":\"struct ERC20Votes.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inToken\",\"type\":\"bool\"}],\"name\":\"distributeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"feeCollectorShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"feeCollectors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeConfiguration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"feesInToken\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"buyFees\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFees\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"transferFees\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"burnFeeRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidityFeeRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"collectorsFeeRatio\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFeeCollector\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"isLpPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"processFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"autoProcess\",\"type\":\"bool\"}],\"name\":\"setAutoprocessFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"feesInToken\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"buyFees\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFees\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"transferFees\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"burnFeeRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidityFeeRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"collectorsFeeRatio\",\"type\":\"uint16\"}],\"internalType\":\"struct TaxableToken.FeeConfiguration\",\"name\":\"configuration\",\"type\":\"tuple\"}],\"name\":\"setFeeConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLp\",\"type\":\"bool\"}],\"name\":\"setIsLpPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setLiquidityOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNumTokensToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"}],\"name\":\"setTaxRateUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellRate\",\"type\":\"uint256\"}],\"name\":\"setTaxRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxRateUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeCollectorsShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"updateFeeCollectorShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"DelegateChanged(address,address,address)\":{\"details\":\"Emitted when an account changes their delegate.\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"details\":\"Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"CLOCK_MODE()\":{\"details\":\"Description of the clock\"},\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"checkpoints(address,uint32)\":{\"details\":\"Get the `pos`-th checkpoint for `account`.\"},\"clock()\":{\"details\":\"Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"delegate(address)\":{\"details\":\"Delegate votes from the sender to `delegatee`.\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates votes from signer to `delegatee`\"},\"delegates(address)\":{\"details\":\"Get the address `account` is currently delegating to.\"},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"getPastTotalSupply(uint256)\":{\"details\":\"Retrieve the `totalSupply` at the end of `timepoint`. Note, this value is the sum of all balances. It is NOT the sum of all the delegated votes! Requirements: - `timepoint` must be in the past\"},\"getPastVotes(address,uint256)\":{\"details\":\"Retrieve the number of votes for `account` at the end of `timepoint`. Requirements: - `timepoint` must be in the past\"},\"getVotes(address)\":{\"details\":\"Gets the current votes balance for `account`\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"numCheckpoints(address)\":{\"details\":\"Get number of checkpoints for `account`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"[Audit Note - IVotes Integration] Extended from ERC20Votes and ERC20Permit for snapshot-based voting and off-chain vote delegation support (EIP-2612 compliant).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BSTRToken.sol\":\"BSTRToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotes {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     */\\n    function getPastVotes(address account, uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x1618ddebe73377660f6da71afcba35d5ac4c4600918b3a381d9c6f37eba613eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5805.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5805.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../governance/utils/IVotes.sol\\\";\\nimport \\\"./IERC6372.sol\\\";\\n\\ninterface IERC5805 is IERC6372, IVotes {}\\n\",\"keccak256\":\"0xfc12b717f6a2cd0d67adc8700097d4464d37f18ce933d4fc9c948ab6aec35e80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC6372.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC6372.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC6372 {\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\\n     */\\n    function clock() external view returns (uint48);\\n\\n    /**\\n     * @dev Description of the clock\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xcaea9aeda3816ba872358c828f4f01455c22ae48ced49c4c7d72bd74176c09b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0xbb16110ffe0b625944fe7dd97adcf1158e514185c956a5628bc09be90d606174\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Votes.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20Permit.sol\\\";\\nimport \\\"../../../interfaces/IERC5805.sol\\\";\\nimport \\\"../../../utils/math/Math.sol\\\";\\nimport \\\"../../../utils/math/SafeCast.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n *\\n * _Available since v4.2._\\n */\\nabstract contract ERC20Votes is ERC20Permit, IERC5805 {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] private _totalSupplyCheckpoints;\\n\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\\n     */\\n    function clock() public view virtual override returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    /**\\n     * @dev Description of the clock\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public view virtual override returns (string memory) {\\n        // Check that the clock was not modified\\n        require(clock() == block.number, \\\"ERC20Votes: broken clock mode\\\");\\n        return \\\"mode=blocknumber&from=default\\\";\\n    }\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCast.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual override returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view virtual override returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        unchecked {\\n            return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `timepoint`.\\n     *\\n     * Requirements:\\n     *\\n     * - `timepoint` must be in the past\\n     */\\n    function getPastVotes(address account, uint256 timepoint) public view virtual override returns (uint256) {\\n        require(timepoint < clock(), \\\"ERC20Votes: future lookup\\\");\\n        return _checkpointsLookup(_checkpoints[account], timepoint);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `timepoint`. Note, this value is the sum of all balances.\\n     * It is NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `timepoint` must be in the past\\n     */\\n    function getPastTotalSupply(uint256 timepoint) public view virtual override returns (uint256) {\\n        require(timepoint < clock(), \\\"ERC20Votes: future lookup\\\");\\n        return _checkpointsLookup(_totalSupplyCheckpoints, timepoint);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 timepoint) private view returns (uint256) {\\n        // We run a binary search to look for the last (most recent) checkpoint taken before (or at) `timepoint`.\\n        //\\n        // Initially we check if the block is recent to narrow the search range.\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `timepoint`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `timepoint`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `timepoint`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `timepoint`, but it works out\\n        // the same.\\n        uint256 length = ckpts.length;\\n\\n        uint256 low = 0;\\n        uint256 high = length;\\n\\n        if (length > 5) {\\n            uint256 mid = length - Math.sqrt(length);\\n            if (_unsafeAccess(ckpts, mid).fromBlock > timepoint) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(ckpts, mid).fromBlock > timepoint) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        unchecked {\\n            return high == 0 ? 0 : _unsafeAccess(ckpts, high - 1).votes;\\n        }\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual override {\\n        _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"ERC20Votes: invalid nonce\\\");\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\\n     */\\n    function _maxSupply() internal view virtual returns (uint224) {\\n        return type(uint224).max;\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been increased.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n        require(totalSupply() <= _maxSupply(), \\\"ERC20Votes: total supply risks overflowing votes\\\");\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been decreased.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        super._burn(account, amount);\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {IVotes-DelegateVotesChanged} event.\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        _moveVotingPower(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {IVotes-DelegateChanged} and {IVotes-DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(address src, address dst, uint256 amount) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n\\n        unchecked {\\n            Checkpoint memory oldCkpt = pos == 0 ? Checkpoint(0, 0) : _unsafeAccess(ckpts, pos - 1);\\n\\n            oldWeight = oldCkpt.votes;\\n            newWeight = op(oldWeight, delta);\\n\\n            if (pos > 0 && oldCkpt.fromBlock == clock()) {\\n                _unsafeAccess(ckpts, pos - 1).votes = SafeCast.toUint224(newWeight);\\n            } else {\\n                ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(clock()), votes: SafeCast.toUint224(newWeight)}));\\n            }\\n        }\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(Checkpoint[] storage ckpts, uint256 pos) private pure returns (Checkpoint storage result) {\\n        assembly {\\n            mstore(0, ckpts.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4e560f86662b6f72ab76122fff53317677154f14bac4a80dbd46a54172b3abfa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8432884527a7ad91e6eed1cfc5a0811ae2073e5bca107bd0ca442e9236b03dbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/BSTRToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n//  ____       ____       ____        _____       ____       \\r\\n// /\\\\  _\\\\    /\\\\  _\\\\    /\\\\  _\\\\     /\\\\  __\\\\    /\\\\  _\\\\     \\r\\n// \\\\ \\\\ \\\\/\\\\ \\\\  \\\\ \\\\ \\\\L\\\\ \\\\  \\\\ \\\\ \\\\L\\\\ \\\\   \\\\ \\\\ \\\\/\\\\ \\\\   \\\\ \\\\,\\\\L\\\\_\\\\   \\r\\n//  \\\\ \\\\ \\\\ \\\\ \\\\  \\\\ \\\\  _ <'  \\\\ \\\\ ,  /    \\\\ \\\\ \\\\ \\\\ \\\\   \\\\/_\\\\__ \\\\   \\r\\n//   \\\\ \\\\ \\\\_\\\\ \\\\  \\\\ \\\\ \\\\L\\\\ \\\\  \\\\ \\\\ \\\\\\\\ \\\\    \\\\ \\\\ \\\\_\\\\ \\\\    /\\\\ \\\\L\\\\ \\\\ \\r\\n//    \\\\ \\\\____/   \\\\ \\\\____/   \\\\ \\\\_\\\\ \\\\_\\\\   \\\\ \\\\_____\\\\   \\\\ \\\\____\\\\\\r\\n//     \\\\/___/     \\\\/___/     \\\\/_/\\\\/ /    \\\\/_____/    \\\\/_____/\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * [Audit Note - IVotes Integration]\\r\\n * Added `ERC20Permit` and `ERC20Votes` extensions from OpenZeppelin\\r\\n * to support governance capabilities and gasless vote delegation.\\r\\n */\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\\\";\\r\\nimport \\\"./libraries/TaxableToken.sol\\\";\\r\\nimport \\\"./libraries/TaxDistributor.sol\\\";\\r\\n\\r\\n/**\\r\\n * [Audit Note - IVotes Integration]\\r\\n * Extended from ERC20Votes and ERC20Permit for snapshot-based voting\\r\\n * and off-chain vote delegation support (EIP-2612 compliant).\\r\\n */\\r\\ncontract BSTRToken is ERC20Permit, ERC20Votes, TaxableToken, Ownable {\\r\\n    address public taxRateUpdater;\\r\\n    uint8 private constant CUSTOM_DECIMALS = 9;\\r\\n\\r\\n    event TaxRateUpdaterChanged(address indexed updater);\\r\\n\\r\\n    constructor(\\r\\n        uint256 initialSupply_,\\r\\n        address feeReceiver_,\\r\\n        address swapRouter_,\\r\\n        address[] memory collectors_,\\r\\n        uint256[] memory shares_\\r\\n    )\\r\\n        payable\\r\\n        ERC20(\\\"Buster\\\", \\\"BSTR\\\")\\r\\n        ERC20Permit(\\\"Buster\\\") // [Audit Note] Enables permit() for off-chain approvals\\r\\n        TaxableToken(\\r\\n            true,\\r\\n            initialSupply_ / 10000,\\r\\n            swapRouter_,\\r\\n            FeeConfiguration({\\r\\n                feesInToken: true,\\r\\n                buyFees: 500,\\r\\n                sellFees: 500,\\r\\n                transferFees: 0,\\r\\n                burnFeeRatio: 0,\\r\\n                liquidityFeeRatio: 5000,\\r\\n                collectorsFeeRatio: 5000\\r\\n            })\\r\\n        )\\r\\n        TaxDistributor(collectors_, shares_)\\r\\n    {\\r\\n        /**\\r\\n         * [Audit Fix - Compilation & Ownership Init]\\r\\n         * Removed constructor argument from Ownable as OZ v4 Ownable() sets owner = msg.sender\\r\\n         */\\r\\n\\r\\n        require(initialSupply_ > 0, \\\"Initial supply cannot be zero\\\");\\r\\n        require(collectors_.length <= 50, \\\"Too many collectors\\\"); // [Audit Fix] Cap fee collectors to avoid gas DoS\\r\\n\\r\\n        /**\\r\\n         * [Audit Fix - Safe ETH Transfer]\\r\\n         * Used .call{value: ...}(\\\"\\\") with success check instead of .transfer\\r\\n         */\\r\\n        (bool success, ) = payable(feeReceiver_).call{value: msg.value}(\\\"\\\");\\r\\n        require(success, \\\"ETH transfer to feeReceiver failed\\\");\\r\\n\\r\\n        _mint(_msgSender(), initialSupply_);\\r\\n\\r\\n        /**\\r\\n         * [Audit Fix - Role Delegation]\\r\\n         * Added logic to utilize `taxRateUpdater` for rate control\\r\\n         */\\r\\n        taxRateUpdater = _msgSender();\\r\\n    }\\r\\n\\r\\n    modifier onlyTaxRateUpdater() {\\r\\n        require(msg.sender == taxRateUpdater, \\\"Not taxRateUpdater\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setTaxRateUpdater(address updater) external onlyOwner nonReentrant {\\r\\n        taxRateUpdater = updater;\\r\\n        emit TaxRateUpdaterChanged(updater);\\r\\n    }\\r\\n\\r\\n    function setTaxRates(uint256 buyRate, uint256 sellRate) external onlyTaxRateUpdater nonReentrant {\\r\\n        require(buyRate <= MAX_FEE && sellRate <= MAX_FEE, \\\"Tax too high\\\");\\r\\n        feeConfiguration.buyFees = uint16(buyRate);\\r\\n        feeConfiguration.sellFees = uint16(sellRate);\\r\\n        emit FeeConfigurationUpdated(feeConfiguration);\\r\\n    }\\r\\n\\r\\n    function decimals() public pure override returns (uint8) {\\r\\n        return CUSTOM_DECIMALS;\\r\\n    }\\r\\n\\r\\n    function _update(address from, address to, uint256 amount) internal virtual override(TaxableToken) {\\r\\n        super._update(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * [Audit Note - IVotes Integration]\\r\\n     * Overrides required by ERC20Votes to sync vote balances with token transfers.\\r\\n     */\\r\\n    function _afterTokenTransfer(address from, address to, uint256 amount)\\r\\n        internal\\r\\n        override(ERC20, ERC20Votes)\\r\\n    {\\r\\n        super._afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint256 amount)\\r\\n        internal\\r\\n        override(ERC20, ERC20Votes)\\r\\n    {\\r\\n        super._mint(to, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount)\\r\\n        internal\\r\\n        override(ERC20, ERC20Votes)\\r\\n    {\\r\\n        super._burn(account, amount);\\r\\n    }\\r\\n\\r\\n    // Wrapped setters with access control\\r\\n    function setAutoprocessFees(bool autoProcess) external override onlyOwner nonReentrant {\\r\\n        require(autoProcessFees != autoProcess, \\\"Already set\\\");\\r\\n        autoProcessFees = autoProcess;\\r\\n    }\\r\\n\\r\\n    function addFeeCollector(address account, uint256 share) external override onlyOwner nonReentrant {\\r\\n        _addFeeCollector(account, share);\\r\\n    }\\r\\n\\r\\n    function removeFeeCollector(address account) external override onlyOwner nonReentrant {\\r\\n        _removeFeeCollector(account);\\r\\n    }\\r\\n\\r\\n    function updateFeeCollectorShare(address account, uint256 share) external override onlyOwner nonReentrant {\\r\\n        _updateFeeCollectorShare(account, share);\\r\\n    }\\r\\n\\r\\n    function distributeFees(uint256 amount, bool inToken) external override onlyOwner nonReentrant {\\r\\n        if (inToken) {\\r\\n            require(balanceOf(address(this)) >= amount, \\\"Not enough token balance\\\");\\r\\n        } else {\\r\\n            require(address(this).balance >= amount, \\\"Not enough ETH balance\\\");\\r\\n        }\\r\\n        _distributeFees(address(this), amount, inToken);\\r\\n    }\\r\\n\\r\\n    function processFees(uint256 amount, uint256 minAmountOut) external override onlyOwner nonReentrant {\\r\\n        require(amount <= balanceOf(address(this)), \\\"Amount too high\\\");\\r\\n        _processFees(amount, minAmountOut);\\r\\n    }\\r\\n\\r\\n    function setIsLpPool(address pairAddress, bool isLp) external override onlyOwner nonReentrant {\\r\\n        _setIsLpPool(pairAddress, isLp);\\r\\n    }\\r\\n\\r\\n    function setIsExcludedFromFees(address account, bool excluded) external override onlyOwner nonReentrant {\\r\\n        _setIsExcludedFromFees(account, excluded);\\r\\n    }\\r\\n\\r\\n    function setLiquidityOwner(address newOwner) external override onlyOwner nonReentrant {\\r\\n        liquidityOwner = newOwner;\\r\\n    }\\r\\n\\r\\n    function setNumTokensToSwap(uint256 amount) external override onlyOwner nonReentrant {\\r\\n        numTokensToSwap = amount;\\r\\n    }\\r\\n\\r\\n    function setFeeConfiguration(FeeConfiguration calldata configuration) external override onlyOwner nonReentrant {\\r\\n        _setFeeConfiguration(configuration);\\r\\n    }\\r\\n\\r\\n    function setSwapRouter(address newRouter) external override onlyOwner nonReentrant {\\r\\n        _setSwapRouter(newRouter);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xe9294f5a11aa9012455b8be9145cad4d7a7db61e0842657308fd2af3b4290018\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\",\"keccak256\":\"0x498f6c48c662975bd2d3e69bbed568b5aa5c1e4eb8035f105d840c7e59f5a30f\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\",\"keccak256\":\"0x6e9af11ceb52c9e4a933fcede6d24328be89ce5f51df0415eca9f505bbb0b7b9\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\nimport './IUniswapV2Router01.sol';\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0x06be79ade73dbedf69f38ccff5c339e447650c2dcf2c53a275dce12df4929f25\",\"license\":\"MIT\"},\"contracts/libraries/TaxDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n//  ____       ____       ____        _____       ____       \\r\\n// /\\\\  _\\\\    /\\\\  _\\\\    /\\\\  _\\\\     /\\\\  __\\\\    /\\\\  _\\\\     \\r\\n// \\\\ \\\\ \\\\/\\\\ \\\\  \\\\ \\\\ \\\\L\\\\ \\\\  \\\\ \\\\ \\\\L\\\\ \\\\   \\\\ \\\\ \\\\/\\\\ \\\\   \\\\ \\\\,\\\\L\\\\_\\\\   \\r\\n//  \\\\ \\\\ \\\\ \\\\ \\\\  \\\\ \\\\  _ <'  \\\\ \\\\ ,  /    \\\\ \\\\ \\\\ \\\\ \\\\   \\\\/_\\\\__ \\\\   \\r\\n//   \\\\ \\\\ \\\\_\\\\ \\\\  \\\\ \\\\ \\\\L\\\\ \\\\  \\\\ \\\\ \\\\\\\\ \\\\    \\\\ \\\\ \\\\_\\\\ \\\\    /\\\\ \\\\L\\\\ \\\\ \\r\\n//    \\\\ \\\\____/   \\\\ \\\\____/   \\\\ \\\\_\\\\ \\\\_\\\\   \\\\ \\\\_____\\\\   \\\\ \\\\____\\\\\\r\\n//     \\\\/___/     \\\\/___/     \\\\/_/\\\\/ /    \\\\/_____/    \\\\/_____/\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nabstract contract TaxDistributor is ReentrancyGuard {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    EnumerableSet.AddressSet private _collectors;\\r\\n    mapping(address => uint256) private _shares;\\r\\n    uint256 public totalFeeCollectorsShares;\\r\\n\\r\\n    uint256 public constant MAX_COLLECTORS = 50;\\r\\n\\r\\n    event FeeCollectorAdded(address indexed account, uint256 share);\\r\\n    event FeeCollectorUpdated(address indexed account, uint256 oldShare, uint256 newShare);\\r\\n    event FeeCollectorRemoved(address indexed account);\\r\\n    event FeeCollected(address indexed receiver, uint256 amount);\\r\\n\\r\\n    constructor(address[] memory collectors_, uint256[] memory shares_) {\\r\\n        require(collectors_.length == shares_.length, \\\"Mismatched input\\\");\\r\\n        require(collectors_.length <= MAX_COLLECTORS, \\\"Too many collectors\\\");\\r\\n        for (uint256 i = 0; i < collectors_.length; i++) {\\r\\n            _addFeeCollector(collectors_[i], shares_[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isFeeCollector(address account) public view returns (bool) {\\r\\n        return _collectors.contains(account);\\r\\n    }\\r\\n\\r\\n    function feeCollectorShare(address account) public view returns (uint256) {\\r\\n        return _shares[account];\\r\\n    }\\r\\n\\r\\n    function feeCollectors(uint256 startIndex, uint256 count) external view returns (address[] memory) {\\r\\n        uint256 length = count;\\r\\n        if (length > _collectors.length() - startIndex) {\\r\\n            length = _collectors.length() - startIndex;\\r\\n        }\\r\\n\\r\\n        address[] memory values = new address[](length);\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            values[i] = _collectors.at(startIndex + i);\\r\\n        }\\r\\n\\r\\n        return values;\\r\\n    }\\r\\n\\r\\n    function _addFeeCollector(address account, uint256 share) internal {\\r\\n        require(!_collectors.contains(account), \\\"Already collector\\\");\\r\\n        require(_collectors.length() < MAX_COLLECTORS, \\\"Max collectors reached\\\");\\r\\n        require(share > 0, \\\"Invalid share\\\");\\r\\n\\r\\n        _collectors.add(account);\\r\\n        _shares[account] = share;\\r\\n        totalFeeCollectorsShares += share;\\r\\n\\r\\n        emit FeeCollectorAdded(account, share);\\r\\n    }\\r\\n\\r\\n    function _removeFeeCollector(address account) internal {\\r\\n        require(_collectors.contains(account), \\\"Not a collector\\\");\\r\\n\\r\\n        _collectors.remove(account);\\r\\n        totalFeeCollectorsShares -= _shares[account];\\r\\n        delete _shares[account];\\r\\n\\r\\n        emit FeeCollectorRemoved(account);\\r\\n    }\\r\\n\\r\\n    function _updateFeeCollectorShare(address account, uint256 share) internal {\\r\\n        require(_collectors.contains(account), \\\"Not a collector\\\");\\r\\n        require(share > 0, \\\"Invalid share\\\");\\r\\n\\r\\n        uint256 oldShare = _shares[account];\\r\\n        totalFeeCollectorsShares -= oldShare;\\r\\n\\r\\n        _shares[account] = share;\\r\\n        totalFeeCollectorsShares += share;\\r\\n\\r\\n        emit FeeCollectorUpdated(account, oldShare, share);\\r\\n    }\\r\\n\\r\\n    function _distributeFees(address token, uint256 amount, bool inToken) internal nonReentrant returns (bool) {\\r\\n        if (amount == 0 || totalFeeCollectorsShares == 0) return false;\\r\\n\\r\\n        uint256 distributed = 0;\\r\\n        uint256 len = _collectors.length();\\r\\n        for (uint256 i = 0; i < len; i++) {\\r\\n            address collector = _collectors.at(i);\\r\\n            uint256 share = i == len - 1\\r\\n                ? amount - distributed\\r\\n                : (amount * _shares[collector]) / totalFeeCollectorsShares;\\r\\n\\r\\n            if (inToken) {\\r\\n                (bool sent, ) = token.call(abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", collector, share));\\r\\n                require(sent, \\\"Token transfer failed\\\");\\r\\n            } else {\\r\\n                payable(collector).transfer(share);\\r\\n            }\\r\\n\\r\\n            emit FeeCollected(collector, share);\\r\\n            distributed += share;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function addFeeCollector(address account, uint256 share) external virtual;\\r\\n    function removeFeeCollector(address account) external virtual;\\r\\n    function updateFeeCollectorShare(address account, uint256 share) external virtual;\\r\\n    function distributeFees(uint256 amount, bool inToken) external virtual;\\r\\n}\",\"keccak256\":\"0xe45fb6eb343a952fa90c19bb1eb2792e34c60aee34d5efb8a8c16e64e770ec84\",\"license\":\"MIT\"},\"contracts/libraries/TaxableToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n//  ____       ____       ____        _____       ____       \\r\\n// /\\\\  _\\\\    /\\\\  _\\\\    /\\\\  _\\\\     /\\\\  __\\\\    /\\\\  _\\\\     \\r\\n// \\\\ \\\\ \\\\/\\\\ \\\\  \\\\ \\\\ \\\\L\\\\ \\\\  \\\\ \\\\ \\\\L\\\\ \\\\   \\\\ \\\\ \\\\/\\\\ \\\\   \\\\ \\\\,\\\\L\\\\_\\\\   \\r\\n//  \\\\ \\\\ \\\\ \\\\ \\\\  \\\\ \\\\  _ <'  \\\\ \\\\ ,  /    \\\\ \\\\ \\\\ \\\\ \\\\   \\\\/_\\\\__ \\\\   \\r\\n//   \\\\ \\\\ \\\\_\\\\ \\\\  \\\\ \\\\ \\\\L\\\\ \\\\  \\\\ \\\\ \\\\\\\\ \\\\    \\\\ \\\\ \\\\_\\\\ \\\\    /\\\\ \\\\L\\\\ \\\\ \\r\\n//    \\\\ \\\\____/   \\\\ \\\\____/   \\\\ \\\\_\\\\ \\\\_\\\\   \\\\ \\\\_____\\\\   \\\\ \\\\____\\\\\\r\\n//     \\\\/___/     \\\\/___/     \\\\/_/\\\\/ /    \\\\/_____/    \\\\/_____/\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"../interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"../interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./TaxDistributor.sol\\\";\\r\\n\\r\\n/*\\r\\n * TaxableToken: Add a tax on buy, sell or transfer\\r\\n */\\r\\nabstract contract TaxableToken is ERC20, TaxDistributor {\\r\\n    struct FeeConfiguration {\\r\\n        bool feesInToken;\\r\\n        uint16 buyFees;\\r\\n        uint16 sellFees;\\r\\n        uint16 transferFees;\\r\\n        uint16 burnFeeRatio;\\r\\n        uint16 liquidityFeeRatio;\\r\\n        uint16 collectorsFeeRatio;\\r\\n    }\\r\\n\\r\\n    address public constant BURN_ADDRESS = address(0x000000000000000000000000000000000000dEaD);\\r\\n    uint16 public constant MAX_FEE = 2000;\\r\\n    uint16 public constant FEE_PRECISION = 10000;\\r\\n\\r\\n    IUniswapV2Router02 public swapRouter;\\r\\n    address public swapPair;\\r\\n    address public liquidityOwner;\\r\\n\\r\\n    bool private _processingFees;\\r\\n    bool public autoProcessFees;\\r\\n    uint256 public numTokensToSwap;\\r\\n    FeeConfiguration public feeConfiguration;\\r\\n\\r\\n    mapping(address => bool) private _excludedFromFees;\\r\\n    mapping(address => bool) private _lpPools;\\r\\n\\r\\n    event FeeConfigurationUpdated(FeeConfiguration configuration);\\r\\n    event SwapRouterUpdated(address indexed router, address indexed pair);\\r\\n    event ExcludedFromFees(address indexed account, bool excluded);\\r\\n    event SetLpPool(address indexed pairAddress, bool isLp);\\r\\n\\r\\n    modifier lockTheSwap() {\\r\\n        _processingFees = true;\\r\\n        _;\\r\\n        _processingFees = false;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        bool autoProcessFees_,\\r\\n        uint256 numTokensToSwap_,\\r\\n        address swapRouter_,\\r\\n        FeeConfiguration memory feeConfiguration_\\r\\n    ) {\\r\\n        numTokensToSwap = numTokensToSwap_;\\r\\n        autoProcessFees = autoProcessFees_;\\r\\n\\r\\n        liquidityOwner = _msgSender();\\r\\n\\r\\n        swapRouter = IUniswapV2Router02(swapRouter_);\\r\\n        swapPair = _pairFor(swapRouter.factory(), address(this), swapRouter.WETH());\\r\\n        _lpPools[swapPair] = true;\\r\\n\\r\\n        _setIsExcludedFromFees(address(0), true);\\r\\n        _setIsExcludedFromFees(BURN_ADDRESS, true);\\r\\n        _setIsExcludedFromFees(address(this), true);\\r\\n        _setIsExcludedFromFees(_msgSender(), true);\\r\\n\\r\\n        _setFeeConfiguration(feeConfiguration_);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function isExcludedFromFees(address account) public view returns (bool) {\\r\\n        return _excludedFromFees[account];\\r\\n    }\\r\\n\\r\\n    function _setIsExcludedFromFees(address account, bool excluded) internal {\\r\\n        require(_excludedFromFees[account] != excluded, \\\"Already set\\\");\\r\\n        _excludedFromFees[account] = excluded;\\r\\n        emit ExcludedFromFees(account, excluded);\\r\\n    }\\r\\n\\r\\n    function _setIsLpPool(address pairAddress, bool isLp) internal {\\r\\n        require(_lpPools[pairAddress] != isLp, \\\"Already set\\\");\\r\\n        _lpPools[pairAddress] = isLp;\\r\\n        emit SetLpPool(pairAddress, isLp);\\r\\n    }\\r\\n\\r\\n    function isLpPool(address pairAddress) public view returns (bool) {\\r\\n        return _lpPools[pairAddress];\\r\\n    }\\r\\n\\r\\n    function _setSwapRouter(address _newRouter) internal {\\r\\n        require(_newRouter != address(0), \\\"Invalid router\\\");\\r\\n\\r\\n        swapRouter = IUniswapV2Router02(_newRouter);\\r\\n        IUniswapV2Factory factory = IUniswapV2Factory(swapRouter.factory());\\r\\n        require(address(factory) != address(0), \\\"Invalid factory\\\");\\r\\n\\r\\n        address weth = swapRouter.WETH();\\r\\n        swapPair = factory.getPair(address(this), weth);\\r\\n        if (swapPair == address(0)) {\\r\\n            swapPair = factory.createPair(address(this), weth);\\r\\n        }\\r\\n\\r\\n        require(swapPair != address(0), \\\"Invalid pair address.\\\");\\r\\n        emit SwapRouterUpdated(address(swapRouter), swapPair);\\r\\n    }\\r\\n\\r\\n    function _setFeeConfiguration(FeeConfiguration memory configuration) internal {\\r\\n        require(configuration.buyFees <= MAX_FEE, \\\"Invalid buy fee\\\");\\r\\n        require(configuration.sellFees <= MAX_FEE, \\\"Invalid sell fee\\\");\\r\\n        require(configuration.transferFees <= MAX_FEE, \\\"Invalid transfer fee\\\");\\r\\n\\r\\n        uint16 totalShare = configuration.burnFeeRatio + configuration.liquidityFeeRatio + configuration.collectorsFeeRatio;\\r\\n        require(totalShare == 0 || totalShare == FEE_PRECISION, \\\"Invalid fee share\\\");\\r\\n\\r\\n        feeConfiguration = configuration;\\r\\n        emit FeeConfigurationUpdated(configuration);\\r\\n    }\\r\\n\\r\\n    function _processFees(uint256 tokenAmount, uint256 minAmountOut) internal lockTheSwap {\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n        if (contractTokenBalance >= tokenAmount) {\\r\\n            uint256 liquidityAmount = (tokenAmount * feeConfiguration.liquidityFeeRatio) / (FEE_PRECISION - feeConfiguration.burnFeeRatio);\\r\\n            uint256 liquidityTokens = liquidityAmount / 2;\\r\\n\\r\\n            uint256 collectorsAmount = tokenAmount - liquidityAmount;\\r\\n            uint256 liquifyAmount = liquidityAmount - liquidityTokens;\\r\\n\\r\\n            if (!feeConfiguration.feesInToken) {\\r\\n                liquifyAmount += collectorsAmount;\\r\\n            }\\r\\n\\r\\n            if (liquifyAmount > 0) {\\r\\n                if (balanceOf(swapPair) == 0) return;\\r\\n\\r\\n                uint256 initialBalance = address(this).balance;\\r\\n\\r\\n                _swapTokensForEth(liquifyAmount, minAmountOut);\\r\\n\\r\\n                uint256 swapBalance = address(this).balance - initialBalance;\\r\\n\\r\\n                uint256 liquidityETH = (swapBalance * liquidityTokens) / liquifyAmount;\\r\\n                if (liquidityETH > 0) {\\r\\n                    _addLiquidity(liquidityTokens, liquidityETH);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (feeConfiguration.feesInToken) {\\r\\n                _distributeFees(address(this), collectorsAmount, true);\\r\\n            } else {\\r\\n                _distributeFees(address(this), address(this).balance, false);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _swapTokensForEth(uint256 tokenAmount, uint256 minAmountOut) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = swapRouter.WETH();\\r\\n\\r\\n        _approve(address(this), address(swapRouter), tokenAmount);\\r\\n\\r\\n        swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            minAmountOut,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        _approve(address(this), address(swapRouter), tokenAmount);\\r\\n\\r\\n        swapRouter.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            0,\\r\\n            liquidityOwner,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        pair = address(\\r\\n            uint160(\\r\\n                uint(\\r\\n                    keccak256(\\r\\n                        abi.encodePacked(\\r\\n                            hex\\\"ff\\\",\\r\\n                            factory,\\r\\n                            keccak256(abi.encodePacked(token0, token1)),\\r\\n                            hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\"\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _update(address from, address to, uint256 amount) internal virtual {\\r\\n        require(amount > 0, \\\"Transfer <= 0\\\");\\r\\n\\r\\n        uint256 taxFee = 0;\\r\\n        bool processFee = !_processingFees && autoProcessFees;\\r\\n\\r\\n        bool fromLP = isLpPool(from);\\r\\n        bool toLP = isLpPool(to);\\r\\n\\r\\n        if (!_processingFees) {\\r\\n            bool fromExcluded = isExcludedFromFees(from);\\r\\n            bool toExcluded = isExcludedFromFees(to);\\r\\n\\r\\n            if (fromLP && !toLP && !toExcluded && to != address(swapRouter)) {\\r\\n                taxFee = feeConfiguration.buyFees;\\r\\n            } else if (toLP && !fromExcluded && !toExcluded) {\\r\\n                taxFee = feeConfiguration.sellFees;\\r\\n            } else if (!fromLP && !toLP && from != address(swapRouter) && !fromExcluded) {\\r\\n                taxFee = feeConfiguration.transferFees;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (processFee && taxFee > 0 && toLP) {\\r\\n            uint256 contractTokenBalance = balanceOf(address(this));\\r\\n            if (contractTokenBalance >= numTokensToSwap) {\\r\\n                _processFees(contractTokenBalance, 0);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (taxFee > 0) {\\r\\n            uint256 taxAmount = (amount * taxFee) / FEE_PRECISION;\\r\\n            uint256 sendAmount = amount - taxAmount;\\r\\n            uint256 burnAmount = (taxAmount * feeConfiguration.burnFeeRatio) / FEE_PRECISION;\\r\\n\\r\\n            if (burnAmount > 0) {\\r\\n                taxAmount -= burnAmount;\\r\\n                super._transfer(from, BURN_ADDRESS, burnAmount);\\r\\n            }\\r\\n\\r\\n            if (taxAmount > 0) {\\r\\n                super._transfer(from, address(this), taxAmount);\\r\\n            }\\r\\n\\r\\n            if (sendAmount > 0) {\\r\\n                super._transfer(from, to, sendAmount);\\r\\n            }\\r\\n        } else {\\r\\n            super._transfer(from, to, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function setAutoprocessFees(bool autoProcess) external virtual;\\r\\n    function setIsLpPool(address pairAddress, bool isLp) external virtual;\\r\\n    function setIsExcludedFromFees(address account, bool excluded) external virtual;\\r\\n    function processFees(uint256 amount, uint256 minAmountOut) external virtual;\\r\\n    function setLiquidityOwner(address newOwner) external virtual;\\r\\n    function setNumTokensToSwap(uint256 amount) external virtual;\\r\\n    function setFeeConfiguration(FeeConfiguration calldata configuration) external virtual;\\r\\n    function setSwapRouter(address newRouter) external virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x10968f32b8d5f155fee728b49f5eeb1286d76ec08f6ffda6f20432e4d8c8cc55\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610160604052604051615b82380380615b8283398101604081905261002391611355565b600161003161271087611460565b6040805160e08101825260018082526101f4602080840182905283850191909152600060608401819052608084015261138860a0840181905260c084015283518085018552600680825265213ab9ba32b960d11b82840181905286518088018852948552603160f81b858501528651808801885291825281840152855180870190965260048652632129aa2960e11b92860192909252899489938993839260036100db838261150a565b5060046100e8828261150a565b506100f8915083905060056105ac565b610120526101078160066105ac565b61014052815160208084019190912060e052815190820120610100524660a05261019460e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c052506001600c5580518251146101ec5760405162461bcd60e51b815260206004820152601060248201526f135a5cdb585d18da1959081a5b9c1d5d60821b60448201526064015b60405180910390fd5b6032825111156102345760405162461bcd60e51b8152602060048201526013602482015272546f6f206d616e7920636f6c6c6563746f727360681b60448201526064016101e3565b60005b825181101561028a57610282838281518110610255576102556115c8565b602002602001015183838151811061026f5761026f6115c8565b60200260200101516105df60201b60201c565b600101610237565b50505060148390556013805460ff60a81b1916600160a81b861515021790556102b03390565b601380546001600160a01b039283166001600160a01b0319918216179091556011805492851692909116821790556040805163c45a015560e01b815290516103b3929163c45a01559160048083019260209291908290030181865afa15801561031d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034191906115de565b601154604080516315ab88c960e31b8152905130926001600160a01b03169163ad5c46489160048083019260209291908290030181865afa15801561038a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ae91906115de565b610749565b601280546001600160a01b0319166001600160a01b039290921691821790556000908152601760205260408120805460ff191660019081179091556103f89190610849565b61040561dead6001610849565b610410306001610849565b61041b336001610849565b610424816108ff565b5050505061043e61043961074560201b60201c565b610b81565b6000851161048e5760405162461bcd60e51b815260206004820152601d60248201527f496e697469616c20737570706c792063616e6e6f74206265207a65726f00000060448201526064016101e3565b6032825111156104d65760405162461bcd60e51b8152602060048201526013602482015272546f6f206d616e7920636f6c6c6563746f727360681b60448201526064016101e3565b6000846001600160a01b03163460405160006040518083038185875af1925050503d8060008114610523576040519150601f19603f3d011682016040523d82523d6000602084013e610528565b606091505b50509050806105845760405162461bcd60e51b815260206004820152602260248201527f455448207472616e7366657220746f206665655265636569766572206661696c604482015261195960f21b60648201526084016101e3565b61058e3387610bd3565b5050601980546001600160a01b031916331790555061172392505050565b60006020835110156105c8576105c183610be1565b90506105d9565b816105d3848261150a565b5060ff90505b92915050565b6105ea600d83610c1f565b1561062b5760405162461bcd60e51b815260206004820152601160248201527020b63932b0b23c9031b7b63632b1ba37b960791b60448201526064016101e3565b6032610637600d610c44565b106106845760405162461bcd60e51b815260206004820152601660248201527f4d617820636f6c6c6563746f727320726561636865640000000000000000000060448201526064016101e3565b600081116106c45760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420736861726560981b60448201526064016101e3565b6106cf600d83610c4e565b506001600160a01b0382166000908152600f60205260408120829055601080548392906106fd9084906115f9565b90915550506040518181526001600160a01b038316907f918584c21fe4a093f5014c0dabaed3e43b642781e27984aef122cae8245fbb23906020015b60405180910390a25050565b3390565b6000806000836001600160a01b0316856001600160a01b03161061076e578385610771565b84845b6040516001600160601b0319606084811b8216602084015283901b16603482015291935091508690604801604051602081830303815290604052805190602001206040516020016108279291907fff00000000000000000000000000000000000000000000000000000000000000815260609290921b6001600160601b031916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b60408051601f1981840301815291905280516020909101209695505050505050565b6001600160a01b03821660009081526016602052604090205481151560ff9091161515036108a75760405162461bcd60e51b815260206004820152600b60248201526a105b1c9958591e481cd95d60aa1b60448201526064016101e3565b6001600160a01b038216600081815260166020908152604091829020805460ff191685151590811790915591519182527f3499bfcf9673677ba552f3fe2ea274ec7e6246da31c3c87e115b45a9b0db2efb9101610739565b6107d061ffff16816020015161ffff16111561094f5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206275792066656560881b60448201526064016101e3565b6107d061ffff16816040015161ffff1611156109a05760405162461bcd60e51b815260206004820152601060248201526f496e76616c69642073656c6c2066656560801b60448201526064016101e3565b6107d061ffff16816060015161ffff1611156109fe5760405162461bcd60e51b815260206004820152601460248201527f496e76616c6964207472616e736665722066656500000000000000000000000060448201526064016101e3565b60008160c001518260a001518360800151610a19919061160c565b610a23919061160c565b905061ffff81161580610a3b575061ffff8116612710145b610a7b5760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642066656520736861726560781b60448201526064016101e3565b81516015805460208501516040808701516060880151608089015160a08a015160c08b015162ffffff1990971698151562ffff0019169890981761010061ffff968716021766ffffffff000000191663010000009386169390930261ffff60281b19169290921765010000000000918516919091021763ffffffff60381b19166701000000000000009184169190910261ffff60481b1916176901000000000000000000958316959095029490941761ffff60581b19166b0100000000000000000000009190921602179055517ff34b49a91d91598b7774795175736ebf4db4fa5a4edf72772cf50fb27c135efd90610b75908490611626565b60405180910390a15050565b601880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610bdd8282610c63565b5050565b600080829050601f81511115610c0c578260405163305a27a960e01b81526004016101e3919061169e565b8051610c17826116ec565b179392505050565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b60006105d9825490565b6000610c3d836001600160a01b038416610d01565b610c6d8282610d50565b6001600160e01b03610c7f610e178216565b1115610ce65760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b60648201526084016101e3565b610cfb600b6119b5610e1d60201b1783610e29565b50505050565b6000818152600183016020526040812054610d48575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105d9565b5060006105d9565b6001600160a01b038216610da65760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016101e3565b8060026000828254610db891906115f9565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610bdd60008383610fa6565b60025490565b6000610c3d82846115f9565b82546000908190818115610e765760008781526020902082016000190160408051808201909152905463ffffffff8116825264010000000090046001600160e01b03166020820152610e8b565b60408051808201909152600080825260208201525b905080602001516001600160e01b03169350610ea884868860201c565b9250600082118015610ed25750610ebd610fb1565b65ffffffffffff16816000015163ffffffff16145b15610f1757610ee083610fc1565b60008881526020902083016000190180546001600160e01b03929092166401000000000263ffffffff909216919091179055610f97565b866040518060400160405280610f41610f34610fb160201b60201c565b65ffffffffffff1661102e565b63ffffffff168152602001610f5586610fc1565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b5050935093915050565b505050565b610fa1838383611093565b6000610fbc436110c5565b905090565b60006001600160e01b0382111561102a5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b60648201526084016101e3565b5090565b600063ffffffff82111561102a5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016101e3565b6001600160a01b03838116600090815260096020526040808220548584168352912054610fa19291821691168361112c565b600065ffffffffffff82111561102a5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203460448201526538206269747360d01b60648201526084016101e3565b816001600160a01b0316836001600160a01b03161415801561114e5750600081115b15610fa1576001600160a01b038316156111d3576001600160a01b0383166000908152600a60209081526040822082916111929190611257901b6119c11785610e29565b91509150846001600160a01b0316600080516020615b6283398151915283836040516111c8929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615610fa1576001600160a01b0382166000908152600a60209081526040822082916112129190610e1d901b6119b51785610e29565b91509150836001600160a01b0316600080516020615b628339815191528383604051611248929190918252602082015260400190565b60405180910390a25050505050565b6000610c3d8284611710565b80516001600160a01b038116811461127a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156112bd576112bd61127f565b604052919050565b60006001600160401b038211156112de576112de61127f565b5060051b60200190565b600082601f8301126112f957600080fd5b815161130c611307826112c5565b611295565b8082825260208201915060208360051b86010192508583111561132e57600080fd5b602085015b8381101561134b578051835260209283019201611333565b5095945050505050565b600080600080600060a0868803121561136d57600080fd5b8551945061137d60208701611263565b935061138b60408701611263565b60608701519093506001600160401b038111156113a757600080fd5b8601601f810188136113b857600080fd5b80516113c6611307826112c5565b8082825260208201915060208360051b85010192508a8311156113e857600080fd5b6020840193505b828410156114115761140084611263565b8252602093840193909101906113ef565b60808a0151909550925050506001600160401b0381111561143157600080fd5b61143d888289016112e8565b9150509295509295909350565b634e487b7160e01b600052601160045260246000fd5b60008261147d57634e487b7160e01b600052601260045260246000fd5b500490565b600181811c9082168061149657607f821691505b6020821081036114b657634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610fa157806000526020600020601f840160051c810160208510156114e35750805b601f840160051c820191505b8181101561150357600081556001016114ef565b5050505050565b81516001600160401b038111156115235761152361127f565b611537816115318454611482565b846114bc565b6020601f82116001811461156b57600083156115535750848201515b600019600385901b1c1916600184901b178455611503565b600084815260208120601f198516915b8281101561159b578785015182556020948501946001909201910161157b565b50848210156115b95786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156115f057600080fd5b610c3d82611263565b808201808211156105d9576105d961144a565b61ffff81811683821601908111156105d9576105d961144a565b600060e08201905082511515825261ffff602084015116602083015261ffff604084015116604083015261ffff606084015116606083015261ffff608084015116608083015260a083015161168160a084018261ffff169052565b5060c083015161169760c084018261ffff169052565b5092915050565b602081526000825180602084015260005b818110156116cc57602081860181015160408684010152016116af565b506000604082850101526040601f19601f83011684010191505092915050565b805160208083015191908110156114b65760001960209190910360031b1b16919050565b818103818111156105d9576105d961144a565b60805160a05160c05160e0516101005161012051610140516143e561177d600039600061136001526000611335015260006122500152600061222801526000612183015260006121ad015260006121d701526143e56000f3fe6080604052600436106103905760003560e01c8063715018a6116101dc578063a9059cbb11610102578063dd62ed3e116100a0578063f1127ed81161006f578063f1127ed814610b87578063f2fde38b14610bd1578063f4232d2514610bf1578063fccc281314610c1157600080fd5b8063dd62ed3e14610b11578063dfdc62d614610b31578063e55096b014610b51578063e63a391f14610b7157600080fd5b8063bc063e1a116100dc578063bc063e1a14610a88578063c31c9c0714610ab1578063c3cda52014610ad1578063d505accf14610af157600080fd5b8063a9059cbb14610a32578063adf1869314610a52578063b3c6e9ee14610a7257600080fd5b806391ddadf41161017a5780639ab24eb0116101495780639ab24eb0146109b15780639b61f1d0146109d15780639e70103d146109f2578063a457c2d714610a1257600080fd5b806391ddadf41461089f57806394b8a703146108cb57806395d89b411461090157806398c47e8c1461091657600080fd5b80637f5bbb2c116101b65780637f5bbb2c1461081957806384b0196e146108395780638da5cb5b146108615780638e539e8c1461087f57600080fd5b8063715018a6146107c457806372bc5583146107d95780637ecebe00146107f957600080fd5b806339509351116102c15780634bf5d7e91161025f5780635cb23e121161022e5780635cb23e12146107005780636f741f2a146107205780636fcfff451461075957806370a082311461078e57600080fd5b80634bf5d7e9146106595780634fbee1931461066e578063587cde1e146106a75780635c19a95c146106e057600080fd5b80633bed93f21161029b5780633bed93f2146105e457806341273657146105f95780634569c44514610619578063490e51471461063957600080fd5b806339509351146105845780633a46b1a8146105a45780633b90b9bf146105c457600080fd5b806323b872dd1161032e578063313ce56711610308578063313ce567146105135780633502628a1461052f5780633644e5151461054f5780633935ebf91461056457600080fd5b806323b872dd1461048e57806326991cc8146104ae5780632b46c6a4146104e657600080fd5b80630a4e42ef1161036a5780630a4e42ef146104175780630f569dad1461043957806318160ddd146104595780631fa67b4d1461046e57600080fd5b806301a6c43b1461039c57806306fdde03146103c5578063095ea7b3146103e757600080fd5b3661039757005b600080fd5b3480156103a857600080fd5b506103b260145481565b6040519081526020015b60405180910390f35b3480156103d157600080fd5b506103da610c27565b6040516103bc9190613c29565b3480156103f357600080fd5b50610407610402366004613c51565b610cb9565b60405190151581526020016103bc565b34801561042357600080fd5b50610437610432366004613c7d565b610cd3565b005b34801561044557600080fd5b50610437610454366004613c9f565b610d51565b34801561046557600080fd5b506002546103b2565b34801561047a57600080fd5b50610437610489366004613cb8565b610d73565b34801561049a57600080fd5b506104076104a9366004613cd5565b610d96565b3480156104ba57600080fd5b506012546104ce906001600160a01b031681565b6040516001600160a01b0390911681526020016103bc565b3480156104f257600080fd5b50610506610501366004613c7d565b610dbc565b6040516103bc9190613d5b565b34801561051f57600080fd5b50604051600981526020016103bc565b34801561053b57600080fd5b5061043761054a366004613c51565b610e95565b34801561055b57600080fd5b506103b2610eaf565b34801561057057600080fd5b506013546104ce906001600160a01b031681565b34801561059057600080fd5b5061040761059f366004613c51565b610ebe565b3480156105b057600080fd5b506103b26105bf366004613c51565b610ee0565b3480156105d057600080fd5b506104076105df366004613cb8565b610f5e565b3480156105f057600080fd5b506103b2603281565b34801561060557600080fd5b50610437610614366004613cb8565b610f6b565b34801561062557600080fd5b50610437610634366004613d83565b610f84565b34801561064557600080fd5b50610437610654366004613daf565b61105d565b34801561066557600080fd5b506103da611084565b34801561067a57600080fd5b50610407610689366004613cb8565b6001600160a01b031660009081526016602052604090205460ff1690565b3480156106b357600080fd5b506104ce6106c2366004613cb8565b6001600160a01b039081166000908152600960205260409020541690565b3480156106ec57600080fd5b506104376106fb366004613cb8565b61111c565b34801561070c57600080fd5b5061043761071b366004613c7d565b611126565b34801561072c57600080fd5b5061040761073b366004613cb8565b6001600160a01b031660009081526017602052604090205460ff1690565b34801561076557600080fd5b50610779610774366004613cb8565b61123f565b60405163ffffffff90911681526020016103bc565b34801561079a57600080fd5b506103b26107a9366004613cb8565b6001600160a01b031660009081526020819052604090205490565b3480156107d057600080fd5b50610437611261565b3480156107e557600080fd5b506104376107f4366004613cb8565b611275565b34801561080557600080fd5b506103b2610814366004613cb8565b6112a8565b34801561082557600080fd5b50610437610834366004613dca565b6112c6565b34801561084557600080fd5b5061084e611327565b6040516103bc9796959493929190613de5565b34801561086d57600080fd5b506018546001600160a01b03166104ce565b34801561088b57600080fd5b506103b261089a366004613c9f565b6113b0565b3480156108ab57600080fd5b506108b4611417565b60405165ffffffffffff90911681526020016103bc565b3480156108d757600080fd5b506103b26108e6366004613cb8565b6001600160a01b03166000908152600f602052604090205490565b34801561090d57600080fd5b506103da611422565b34801561092257600080fd5b5060155461096f9060ff81169061ffff610100820481169163010000008104821691650100000000008204811691600160381b8104821691600160481b8204811691600160581b90041687565b60408051971515885261ffff968716602089015294861694870194909452918416606086015283166080850152821660a08401521660c082015260e0016103bc565b3480156109bd57600080fd5b506103b26109cc366004613cb8565b611431565b3480156109dd57600080fd5b5060135461040790600160a81b900460ff1681565b3480156109fe57600080fd5b506019546104ce906001600160a01b031681565b348015610a1e57600080fd5b50610407610a2d366004613c51565b6114b3565b348015610a3e57600080fd5b50610407610a4d366004613c51565b611539565b348015610a5e57600080fd5b50610437610a6d366004613e7d565b611547565b348015610a7e57600080fd5b506103b260105481565b348015610a9457600080fd5b50610a9e6107d081565b60405161ffff90911681526020016103bc565b348015610abd57600080fd5b506011546104ce906001600160a01b031681565b348015610add57600080fd5b50610437610aec366004613eba565b611561565b348015610afd57600080fd5b50610437610b0c366004613f14565b611697565b348015610b1d57600080fd5b506103b2610b2c366004613f83565b6117fb565b348015610b3d57600080fd5b50610437610b4c366004613cb8565b611826565b348015610b5d57600080fd5b50610437610b6c366004613e7d565b611887565b348015610b7d57600080fd5b50610a9e61271081565b348015610b9357600080fd5b50610ba7610ba2366004613fbc565b6118a1565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016103bc565b348015610bdd57600080fd5b50610437610bec366004613cb8565b611925565b348015610bfd57600080fd5b50610437610c0c366004613c51565b61199b565b348015610c1d57600080fd5b506104ce61dead81565b606060038054610c3690613ff3565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6290613ff3565b8015610caf5780601f10610c8457610100808354040283529160200191610caf565b820191906000526020600020905b815481529060010190602001808311610c9257829003601f168201915b5050505050905090565b600033610cc78185856119cd565b60019150505b92915050565b610cdb611af1565b610ce3611b4b565b30600090815260208190526040902054821115610d395760405162461bcd60e51b815260206004820152600f60248201526e082dadeeadce840e8dede40d0d2ced608b1b60448201526064015b60405180910390fd5b610d438282611ba4565b610d4d6001600c55565b5050565b610d59611af1565b610d61611b4b565b6014819055610d706001600c55565b50565b610d7b611af1565b610d83611b4b565b610d8c81611d13565b610d706001600c55565b600033610da4858285611ddd565b610daf858585611e57565b60019150505b9392505050565b60608183610dca600d612001565b610dd4919061403d565b811115610df35783610de6600d612001565b610df0919061403d565b90505b60008167ffffffffffffffff811115610e0e57610e0e614050565b604051908082528060200260200182016040528015610e37578160200160208202803683370190505b50905060005b82811015610e8c57610e5a610e528288614066565b600d9061200b565b828281518110610e6c57610e6c614079565b6001600160a01b0390921660209283029190910190910152600101610e3d565b50949350505050565b610e9d611af1565b610ea5611b4b565b610d438282612017565b6000610eb9612176565b905090565b600033610cc7818585610ed183836117fb565b610edb9190614066565b6119cd565b6000610eea611417565b65ffffffffffff168210610f3c5760405162461bcd60e51b815260206004820152601960248201527804552433230566f7465733a20667574757265206c6f6f6b757603c1b6044820152606401610d30565b6001600160a01b0383166000908152600a60205260409020610db590836122a1565b6000610ccd600d8361238a565b610f73611af1565b610f7b611b4b565b610d8c816123ac565b610f8c611af1565b610f94611b4b565b8015610ffe5730600090815260208190526040902054821115610ff95760405162461bcd60e51b815260206004820152601860248201527f4e6f7420656e6f75676820746f6b656e2062616c616e636500000000000000006044820152606401610d30565b611047565b814710156110475760405162461bcd60e51b81526020600482015260166024820152754e6f7420656e6f756768204554482062616c616e636560501b6044820152606401610d30565b6110523083836126e9565b50610d4d6001600c55565b611065611af1565b61106d611b4b565b610d8c61107f368390038301836140a1565b61291d565b60604361108f611417565b65ffffffffffff16146110e45760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a2062726f6b656e20636c6f636b206d6f64650000006044820152606401610d30565b5060408051808201909152601d81527f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000602082015290565b610d703382612b90565b6019546001600160a01b031633146111755760405162461bcd60e51b81526020600482015260126024820152712737ba103a30bc2930ba32aab83230ba32b960711b6044820152606401610d30565b61117d611b4b565b6107d0821180159061119157506107d08111155b6111cc5760405162461bcd60e51b815260206004820152600c60248201526b0a8c2f040e8dede40d0d2ced60a31b6044820152606401610d30565b6015805461ffff83811663010000000264ffff00000019918616610100029190911664ffffffff0019909216919091171781556040517ff34b49a91d91598b7774795175736ebf4db4fa5a4edf72772cf50fb27c135efd9161122d91614161565b60405180910390a1610d4d6001600c55565b6001600160a01b0381166000908152600a6020526040812054610ccd90612c09565b611269611af1565b6112736000612c72565b565b61127d611af1565b611285611b4b565b601380546001600160a01b0319166001600160a01b0383161790556001600c5550565b6001600160a01b038116600090815260076020526040812054610ccd565b6112ce611af1565b6112d6611b4b565b801515601360159054906101000a900460ff161515036113085760405162461bcd60e51b8152600401610d30906141c7565b6013805460ff60a81b1916600160a81b831515021790556001600c5550565b60006060808280808361135b7f00000000000000000000000000000000000000000000000000000000000000006005612cc4565b6113867f00000000000000000000000000000000000000000000000000000000000000006006612cc4565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60006113ba611417565b65ffffffffffff16821061140c5760405162461bcd60e51b815260206004820152601960248201527804552433230566f7465733a20667574757265206c6f6f6b757603c1b6044820152606401610d30565b610ccd600b836122a1565b6000610eb943612d6f565b606060048054610c3690613ff3565b6001600160a01b0381166000908152600a602052604081205480156114a0576001600160a01b0383166000908152600a602052604090208054600019830190811061147e5761147e614079565b60009182526020909120015464010000000090046001600160e01b03166114a3565b60005b6001600160e01b03169392505050565b600033816114c182866117fb565b9050838110156115215760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610d30565b61152e82868684036119cd565b506001949350505050565b600033610cc7818585611e57565b61154f611af1565b611557611b4b565b610d438282612dd6565b834211156115b15760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e617475726520657870697265640000006044820152606401610d30565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b03881691810191909152606081018690526080810185905260009061162b906116239060a00160405160208183030381529060405280519060200120612e6e565b858585612e9b565b905061163681612ec3565b86146116845760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e6365000000000000006044820152606401610d30565b61168e8188612b90565b50505050505050565b834211156116e75760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610d30565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886117168c612ec3565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061177182612e6e565b9050600061178182878787612e9b565b9050896001600160a01b0316816001600160a01b0316146117e45760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610d30565b6117ef8a8a8a6119cd565b50505050505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61182e611af1565b611836611b4b565b601980546001600160a01b0319166001600160a01b0383169081179091556040517f9303ecbbfa9686993e20c6f50ad460bbf48268e45fab9bb5090bd6160f83217590600090a2610d706001600c55565b61188f611af1565b611897611b4b565b610d438282612eeb565b60408051808201909152600080825260208201526001600160a01b0383166000908152600a60205260409020805463ffffffff84169081106118e5576118e5614079565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b61192d611af1565b6001600160a01b0381166119925760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d30565b610d7081612c72565b6119a3611af1565b6119ab611b4b565b610d438282612f83565b6000610db58284614066565b6000610db5828461403d565b6001600160a01b038316611a2f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610d30565b6001600160a01b038216611a905760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610d30565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6018546001600160a01b031633146112735760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d30565b6002600c5403611b9d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d30565b6002600c55565b6013805460ff60a01b1916600160a01b179055306000908152602081905260408120549050828110611d0057601554600090611bed90600160381b900461ffff166127106141ec565b60155461ffff91821691611c0991600160481b90041686614206565b611c139190614233565b90506000611c22600283614233565b90506000611c30838761403d565b90506000611c3e838561403d565b60155490915060ff16611c5857611c558282614066565b90505b8015611cd0576012546001600160a01b0316600090815260208190526040902054600003611c8a575050505050611d02565b47611c9582886130b8565b6000611ca1824761403d565b9050600083611cb08784614206565b611cba9190614233565b90508015611ccc57611ccc8682613209565b5050505b60155460ff1615611ced57611ce7308360016126e9565b50611cfb565b611cf9304760006126e9565b505b505050505b505b50506013805460ff60a01b19169055565b611d1e600d8261238a565b611d5c5760405162461bcd60e51b815260206004820152600f60248201526e2737ba10309031b7b63632b1ba37b960891b6044820152606401610d30565b611d67600d826132bd565b506001600160a01b0381166000908152600f60205260408120546010805491929091611d9490849061403d565b90915550506001600160a01b0381166000818152600f6020526040808220829055517f904316769e154356a5e4aad5d41591b55913c7717fab281d818c1fed7d80e8149190a250565b6000611de984846117fb565b90506000198114611e515781811015611e445760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610d30565b611e5184848484036119cd565b50505050565b6001600160a01b038316611ebb5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610d30565b6001600160a01b038216611f1d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610d30565b6001600160a01b03831660009081526020819052604090205481811015611f955760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610d30565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3611e518484846132d7565b6000610ccd825490565b6000610db583836132e2565b612022600d8361238a565b156120635760405162461bcd60e51b815260206004820152601160248201527020b63932b0b23c9031b7b63632b1ba37b960791b6044820152606401610d30565b603261206f600d612001565b106120b55760405162461bcd60e51b815260206004820152601660248201527513585e0818dbdb1b1958dd1bdc9cc81c995858da195960521b6044820152606401610d30565b600081116120f55760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420736861726560981b6044820152606401610d30565b612100600d8361330c565b506001600160a01b0382166000908152600f602052604081208290556010805483929061212e908490614066565b90915550506040518181526001600160a01b038316907f918584c21fe4a093f5014c0dabaed3e43b642781e27984aef122cae8245fbb23906020015b60405180910390a25050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156121cf57507f000000000000000000000000000000000000000000000000000000000000000046145b156121f957507f000000000000000000000000000000000000000000000000000000000000000090565b610eb9604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b8154600090818160058111156122fb5760006122bc84613321565b6122c6908561403d565b600088815260209020909150869082015463ffffffff1611156122eb578091506122f9565b6122f6816001614066565b92505b505b8082101561234857600061230f8383613409565b600088815260209020909150869082015463ffffffff16111561233457809150612342565b61233f816001614066565b92505b506122fb565b8015612374576000868152602090208101600019015464010000000090046001600160e01b0316612377565b60005b6001600160e01b03169695505050505050565b6001600160a01b03811660009081526001830160205260408120541515610db5565b6001600160a01b0381166123f35760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b2103937baba32b960911b6044820152606401610d30565b601180546001600160a01b0319166001600160a01b0383169081179091556040805163c45a015560e01b815290516000929163c45a01559160048083019260209291908290030181865afa15801561244f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124739190614255565b90506001600160a01b0381166124bd5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c696420666163746f727960881b6044820152606401610d30565b601154604080516315ab88c960e31b815290516000926001600160a01b03169163ad5c46489160048083019260209291908290030181865afa158015612507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252b9190614255565b60405163e6a4390560e01b81523060048201526001600160a01b0380831660248301529192509083169063e6a4390590604401602060405180830381865afa15801561257b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259f9190614255565b601280546001600160a01b0319166001600160a01b03929092169182179055612655576040516364e329cb60e11b81523060048201526001600160a01b03828116602483015283169063c9c65396906044016020604051808303816000875af1158015612610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126349190614255565b601280546001600160a01b0319166001600160a01b03929092169190911790555b6012546001600160a01b03166126a55760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103830b4b91030b2323932b9b99760591b6044820152606401610d30565b6012546011546040516001600160a01b0392831692909116907fca394f95d8dbf1e8b2e76b9a8da90cacce1da85181a65508dab13212dc1df53b90600090a3505050565b60006126f3611b4b565b8215806127005750601054155b1561270d57506000612913565b60008061271a600d612001565b905060005b8181101561290b576000612734600d8361200b565b9050600061274360018561403d565b831461277e576010546001600160a01b0383166000908152600f602052604090205461276f908a614206565b6127799190614233565b612788565b612788858961403d565b9050861561287a576040516001600160a01b03838116602483015260448201839052600091908b169060640160408051601f198184030181529181526020820180516001600160e01b031663a9059cbb60e01b179052516127e99190614272565b6000604051808303816000865af19150503d8060008114612826576040519150601f19603f3d011682016040523d82523d6000602084013e61282b565b606091505b50509050806128745760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610d30565b506128b2565b6040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156128b0573d6000803e3d6000fd5b505b816001600160a01b03167f06c5efeff5c320943d265dc4e5f1af95ad523555ce0c1957e367dda5514572df826040516128ed91815260200190565b60405180910390a26128ff8186614066565b9450505060010161271f565b506001925050505b610db56001600c55565b6107d061ffff16816020015161ffff16111561296d5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206275792066656560881b6044820152606401610d30565b6107d061ffff16816040015161ffff1611156129be5760405162461bcd60e51b815260206004820152601060248201526f496e76616c69642073656c6c2066656560801b6044820152606401610d30565b6107d061ffff16816060015161ffff161115612a135760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964207472616e736665722066656560601b6044820152606401610d30565b60008160c001518260a001518360800151612a2e919061428e565b612a38919061428e565b905061ffff81161580612a50575061ffff8116612710145b612a905760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642066656520736861726560781b6044820152606401610d30565b81516015805460208501516040808701516060880151608089015160a08a015160c08b015162ffffff1990971698151562ffff0019169890981761010061ffff968716021766ffffffff000000191663010000009386169390930266ffff00000000001916929092176501000000000091851691909102176affffffff000000000000001916600160381b918416919091026affff000000000000000000191617600160481b958316959095029490941761ffff60581b1916600160581b9190921602179055517ff34b49a91d91598b7774795175736ebf4db4fa5a4edf72772cf50fb27c135efd90612b849084906142a8565b60405180910390a15050565b6001600160a01b038281166000818152600960208181526040808420805485845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4611e51828483613424565b600063ffffffff821115612c6e5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610d30565b5090565b601880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606060ff8314612cde57612cd783613561565b9050610ccd565b818054612cea90613ff3565b80601f0160208091040260200160405190810160405280929190818152602001828054612d1690613ff3565b8015612d635780601f10612d3857610100808354040283529160200191612d63565b820191906000526020600020905b815481529060010190602001808311612d4657829003601f168201915b50505050509050610ccd565b600065ffffffffffff821115612c6e5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203460448201526538206269747360d01b6064820152608401610d30565b6001600160a01b03821660009081526016602052604090205481151560ff909116151503612e165760405162461bcd60e51b8152600401610d30906141c7565b6001600160a01b038216600081815260166020908152604091829020805460ff191685151590811790915591519182527f3499bfcf9673677ba552f3fe2ea274ec7e6246da31c3c87e115b45a9b0db2efb910161216a565b6000610ccd612e7b612176565b8360405161190160f01b8152600281019290925260228201526042902090565b6000806000612eac878787876135a0565b91509150612eb981613664565b5095945050505050565b6001600160a01b03811660009081526007602052604090208054600181018255905b50919050565b6001600160a01b03821660009081526017602052604090205481151560ff909116151503612f2b5760405162461bcd60e51b8152600401610d30906141c7565b6001600160a01b038216600081815260176020908152604091829020805460ff191685151590811790915591519182527f902b2ea0acdec5a260e398590d055fe29bd61ef5dd41e45db54a4cd98d5569e0910161216a565b612f8e600d8361238a565b612fcc5760405162461bcd60e51b815260206004820152600f60248201526e2737ba10309031b7b63632b1ba37b960891b6044820152606401610d30565b6000811161300c5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420736861726560981b6044820152606401610d30565b6001600160a01b0382166000908152600f6020526040812054601080549192839261303890849061403d565b90915550506001600160a01b0383166000908152600f602052604081208390556010805484929061306a908490614066565b909155505060408051828152602081018490526001600160a01b038516917fd350c3685bdab1285c0b97ffb6e96d96ed0ad4578a135c38250e771e7cb831aa910160405180910390a2505050565b60408051600280825260608201835260009260208301908036833701905050905030816000815181106130ed576130ed614079565b6001600160a01b03928316602091820292909201810191909152601154604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015613146573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316a9190614255565b8160018151811061317d5761317d614079565b6001600160a01b0392831660209182029290920101526011546131a391309116856119cd565b60115460405163791ac94760e01b81526001600160a01b039091169063791ac947906131db9086908690869030904290600401614319565b600060405180830381600087803b1580156131f557600080fd5b505af115801561168e573d6000803e3d6000fd5b6011546132219030906001600160a01b0316846119cd565b60115460135460405163f305d71960e01b81523060048201526024810185905260006044820181905260648201526001600160a01b0391821660848201524260a482015291169063f305d71990839060c40160606040518083038185885af1158015613291573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906132b69190614355565b5050505050565b6000610db5836001600160a01b0384166137ae565b505050565b6132d28383836138a8565b60008260000182815481106132f9576132f9614079565b9060005260206000200154905092915050565b6000610db5836001600160a01b0384166138da565b60008160000361333357506000919050565b6000600161334084613929565b901c6001901b905060018184816133595761335961421d565b048201901c905060018184816133715761337161421d565b048201901c905060018184816133895761338961421d565b048201901c905060018184816133a1576133a161421d565b048201901c905060018184816133b9576133b961421d565b048201901c905060018184816133d1576133d161421d565b048201901c905060018184816133e9576133e961421d565b048201901c9050610db5818285816134035761340361421d565b046139bd565b60006134186002848418614233565b610db590848416614066565b816001600160a01b0316836001600160a01b0316141580156134465750600081115b156132d2576001600160a01b038316156134d4576001600160a01b0383166000908152600a602052604081208190613481906119c1856139d3565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516134c9929190918252602082015260400190565b60405180910390a250505b6001600160a01b038216156132d2576001600160a01b0382166000908152600a60205260408120819061350a906119b5856139d3565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051613552929190918252602082015260400190565b60405180910390a25050505050565b6060600061356e83613b48565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156135d7575060009050600361365b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561362b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166136545760006001925092505061365b565b9150600090505b94509492505050565b600081600481111561367857613678614383565b036136805750565b600181600481111561369457613694614383565b036136e15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610d30565b60028160048111156136f5576136f5614383565b036137425760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610d30565b600381600481111561375657613756614383565b03610d705760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610d30565b600081815260018301602052604081205480156138975760006137d260018361403d565b85549091506000906137e69060019061403d565b905081811461384b57600086600001828154811061380657613806614079565b906000526020600020015490508087600001848154811061382957613829614079565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061385c5761385c614399565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610ccd565b6000915050610ccd565b5092915050565b6001600160a01b038381166000908152600960205260408082205485841683529120546132d292918216911683613424565b600081815260018301602052604081205461392157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ccd565b506000610ccd565b600080608083901c1561393e57608092831c92015b604083901c1561395057604092831c92015b602083901c1561396257602092831c92015b601083901c1561397457601092831c92015b600883901c1561398657600892831c92015b600483901c1561399857600492831c92015b600283901c156139aa57600292831c92015b600183901c15610ccd5760010192915050565b60008183106139cc5781610db5565b5090919050565b82546000908190818115613a205760008781526020902082016000190160408051808201909152905463ffffffff8116825264010000000090046001600160e01b03166020820152613a35565b60408051808201909152600080825260208201525b905080602001516001600160e01b03169350613a5584868863ffffffff16565b9250600082118015613a7f5750613a6a611417565b65ffffffffffff16816000015163ffffffff16145b15613ac457613a8d83613b70565b60008881526020902083016000190180546001600160e01b03929092166401000000000263ffffffff909216919091179055613b3e565b866040518060400160405280613ae8613adb611417565b65ffffffffffff16612c09565b63ffffffff168152602001613afc86613b70565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b5050935093915050565b600060ff8216601f811115610ccd57604051632cd44ac360e21b815260040160405180910390fd5b60006001600160e01b03821115612c6e5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401610d30565b60005b83811015613bf4578181015183820152602001613bdc565b50506000910152565b60008151808452613c15816020860160208601613bd9565b601f01601f19169290920160200192915050565b602081526000610db56020830184613bfd565b6001600160a01b0381168114610d7057600080fd5b60008060408385031215613c6457600080fd5b8235613c6f81613c3c565b946020939093013593505050565b60008060408385031215613c9057600080fd5b50508035926020909101359150565b600060208284031215613cb157600080fd5b5035919050565b600060208284031215613cca57600080fd5b8135610db581613c3c565b600080600060608486031215613cea57600080fd5b8335613cf581613c3c565b92506020840135613d0581613c3c565b929592945050506040919091013590565b600081518084526020840193506020830160005b82811015613d515781516001600160a01b0316865260209586019590910190600101613d2a565b5093949350505050565b602081526000610db56020830184613d16565b80358015158114613d7e57600080fd5b919050565b60008060408385031215613d9657600080fd5b82359150613da660208401613d6e565b90509250929050565b600060e0828403128015613dc257600080fd5b509092915050565b600060208284031215613ddc57600080fd5b610db582613d6e565b60ff60f81b8816815260e060208201526000613e0460e0830189613bfd565b8281036040840152613e168189613bfd565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501528451808252602080870193509091019060005b81811015613e6c578351835260209384019390920191600101613e4e565b50909b9a5050505050505050505050565b60008060408385031215613e9057600080fd5b8235613e9b81613c3c565b9150613da660208401613d6e565b803560ff81168114613d7e57600080fd5b60008060008060008060c08789031215613ed357600080fd5b8635613ede81613c3c565b95506020870135945060408701359350613efa60608801613ea9565b9598949750929560808101359460a0909101359350915050565b600080600080600080600060e0888a031215613f2f57600080fd5b8735613f3a81613c3c565b96506020880135613f4a81613c3c565b95506040880135945060608801359350613f6660808901613ea9565b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215613f9657600080fd5b8235613fa181613c3c565b91506020830135613fb181613c3c565b809150509250929050565b60008060408385031215613fcf57600080fd5b8235613fda81613c3c565b9150602083013563ffffffff81168114613fb157600080fd5b600181811c9082168061400757607f821691505b602082108103612ee557634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610ccd57610ccd614027565b634e487b7160e01b600052604160045260246000fd5b80820180821115610ccd57610ccd614027565b634e487b7160e01b600052603260045260246000fd5b803561ffff81168114613d7e57600080fd5b600060e08284031280156140b457600080fd5b5060405160e0810167ffffffffffffffff811182821017156140e657634e487b7160e01b600052604160045260246000fd5b6040526140f283613d6e565b81526141006020840161408f565b60208201526141116040840161408f565b60408201526141226060840161408f565b60608201526141336080840161408f565b608082015261414460a0840161408f565b60a082015261415560c0840161408f565b60c08201529392505050565b815460ff81161515825261ffff600882901c81166020840152601882901c16604083015260e0820190602881901c61ffff166060840152603881901c61ffff166080840152604881901c61ffff1660a0840152605881901c61ffff1660c08401526138a1565b6020808252600b908201526a105b1c9958591e481cd95d60aa1b604082015260600190565b61ffff8281168282160390811115610ccd57610ccd614027565b8082028115828204841417610ccd57610ccd614027565b634e487b7160e01b600052601260045260246000fd5b60008261425057634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561426757600080fd5b8151610db581613c3c565b60008251614284818460208701613bd9565b9190910192915050565b61ffff8181168382160190811115610ccd57610ccd614027565b600060e08201905082511515825261ffff602084015116602083015261ffff604084015116604083015261ffff606084015116606083015261ffff608084015116608083015260a083015161430360a084018261ffff169052565b5060c08301516138a160c084018261ffff169052565b85815284602082015260a06040820152600061433860a0830186613d16565b6001600160a01b0394909416606083015250608001529392505050565b60008060006060848603121561436a57600080fd5b5050815160208301516040909301519094929350919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fdfea26469706673582212206125785784b28b541e783781c822ad7edd74b964013e36f7f1eb32783b5c04b564736f6c634300081b0033dec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724",
  "deployedBytecode": "0x6080604052600436106103905760003560e01c8063715018a6116101dc578063a9059cbb11610102578063dd62ed3e116100a0578063f1127ed81161006f578063f1127ed814610b87578063f2fde38b14610bd1578063f4232d2514610bf1578063fccc281314610c1157600080fd5b8063dd62ed3e14610b11578063dfdc62d614610b31578063e55096b014610b51578063e63a391f14610b7157600080fd5b8063bc063e1a116100dc578063bc063e1a14610a88578063c31c9c0714610ab1578063c3cda52014610ad1578063d505accf14610af157600080fd5b8063a9059cbb14610a32578063adf1869314610a52578063b3c6e9ee14610a7257600080fd5b806391ddadf41161017a5780639ab24eb0116101495780639ab24eb0146109b15780639b61f1d0146109d15780639e70103d146109f2578063a457c2d714610a1257600080fd5b806391ddadf41461089f57806394b8a703146108cb57806395d89b411461090157806398c47e8c1461091657600080fd5b80637f5bbb2c116101b65780637f5bbb2c1461081957806384b0196e146108395780638da5cb5b146108615780638e539e8c1461087f57600080fd5b8063715018a6146107c457806372bc5583146107d95780637ecebe00146107f957600080fd5b806339509351116102c15780634bf5d7e91161025f5780635cb23e121161022e5780635cb23e12146107005780636f741f2a146107205780636fcfff451461075957806370a082311461078e57600080fd5b80634bf5d7e9146106595780634fbee1931461066e578063587cde1e146106a75780635c19a95c146106e057600080fd5b80633bed93f21161029b5780633bed93f2146105e457806341273657146105f95780634569c44514610619578063490e51471461063957600080fd5b806339509351146105845780633a46b1a8146105a45780633b90b9bf146105c457600080fd5b806323b872dd1161032e578063313ce56711610308578063313ce567146105135780633502628a1461052f5780633644e5151461054f5780633935ebf91461056457600080fd5b806323b872dd1461048e57806326991cc8146104ae5780632b46c6a4146104e657600080fd5b80630a4e42ef1161036a5780630a4e42ef146104175780630f569dad1461043957806318160ddd146104595780631fa67b4d1461046e57600080fd5b806301a6c43b1461039c57806306fdde03146103c5578063095ea7b3146103e757600080fd5b3661039757005b600080fd5b3480156103a857600080fd5b506103b260145481565b6040519081526020015b60405180910390f35b3480156103d157600080fd5b506103da610c27565b6040516103bc9190613c29565b3480156103f357600080fd5b50610407610402366004613c51565b610cb9565b60405190151581526020016103bc565b34801561042357600080fd5b50610437610432366004613c7d565b610cd3565b005b34801561044557600080fd5b50610437610454366004613c9f565b610d51565b34801561046557600080fd5b506002546103b2565b34801561047a57600080fd5b50610437610489366004613cb8565b610d73565b34801561049a57600080fd5b506104076104a9366004613cd5565b610d96565b3480156104ba57600080fd5b506012546104ce906001600160a01b031681565b6040516001600160a01b0390911681526020016103bc565b3480156104f257600080fd5b50610506610501366004613c7d565b610dbc565b6040516103bc9190613d5b565b34801561051f57600080fd5b50604051600981526020016103bc565b34801561053b57600080fd5b5061043761054a366004613c51565b610e95565b34801561055b57600080fd5b506103b2610eaf565b34801561057057600080fd5b506013546104ce906001600160a01b031681565b34801561059057600080fd5b5061040761059f366004613c51565b610ebe565b3480156105b057600080fd5b506103b26105bf366004613c51565b610ee0565b3480156105d057600080fd5b506104076105df366004613cb8565b610f5e565b3480156105f057600080fd5b506103b2603281565b34801561060557600080fd5b50610437610614366004613cb8565b610f6b565b34801561062557600080fd5b50610437610634366004613d83565b610f84565b34801561064557600080fd5b50610437610654366004613daf565b61105d565b34801561066557600080fd5b506103da611084565b34801561067a57600080fd5b50610407610689366004613cb8565b6001600160a01b031660009081526016602052604090205460ff1690565b3480156106b357600080fd5b506104ce6106c2366004613cb8565b6001600160a01b039081166000908152600960205260409020541690565b3480156106ec57600080fd5b506104376106fb366004613cb8565b61111c565b34801561070c57600080fd5b5061043761071b366004613c7d565b611126565b34801561072c57600080fd5b5061040761073b366004613cb8565b6001600160a01b031660009081526017602052604090205460ff1690565b34801561076557600080fd5b50610779610774366004613cb8565b61123f565b60405163ffffffff90911681526020016103bc565b34801561079a57600080fd5b506103b26107a9366004613cb8565b6001600160a01b031660009081526020819052604090205490565b3480156107d057600080fd5b50610437611261565b3480156107e557600080fd5b506104376107f4366004613cb8565b611275565b34801561080557600080fd5b506103b2610814366004613cb8565b6112a8565b34801561082557600080fd5b50610437610834366004613dca565b6112c6565b34801561084557600080fd5b5061084e611327565b6040516103bc9796959493929190613de5565b34801561086d57600080fd5b506018546001600160a01b03166104ce565b34801561088b57600080fd5b506103b261089a366004613c9f565b6113b0565b3480156108ab57600080fd5b506108b4611417565b60405165ffffffffffff90911681526020016103bc565b3480156108d757600080fd5b506103b26108e6366004613cb8565b6001600160a01b03166000908152600f602052604090205490565b34801561090d57600080fd5b506103da611422565b34801561092257600080fd5b5060155461096f9060ff81169061ffff610100820481169163010000008104821691650100000000008204811691600160381b8104821691600160481b8204811691600160581b90041687565b60408051971515885261ffff968716602089015294861694870194909452918416606086015283166080850152821660a08401521660c082015260e0016103bc565b3480156109bd57600080fd5b506103b26109cc366004613cb8565b611431565b3480156109dd57600080fd5b5060135461040790600160a81b900460ff1681565b3480156109fe57600080fd5b506019546104ce906001600160a01b031681565b348015610a1e57600080fd5b50610407610a2d366004613c51565b6114b3565b348015610a3e57600080fd5b50610407610a4d366004613c51565b611539565b348015610a5e57600080fd5b50610437610a6d366004613e7d565b611547565b348015610a7e57600080fd5b506103b260105481565b348015610a9457600080fd5b50610a9e6107d081565b60405161ffff90911681526020016103bc565b348015610abd57600080fd5b506011546104ce906001600160a01b031681565b348015610add57600080fd5b50610437610aec366004613eba565b611561565b348015610afd57600080fd5b50610437610b0c366004613f14565b611697565b348015610b1d57600080fd5b506103b2610b2c366004613f83565b6117fb565b348015610b3d57600080fd5b50610437610b4c366004613cb8565b611826565b348015610b5d57600080fd5b50610437610b6c366004613e7d565b611887565b348015610b7d57600080fd5b50610a9e61271081565b348015610b9357600080fd5b50610ba7610ba2366004613fbc565b6118a1565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016103bc565b348015610bdd57600080fd5b50610437610bec366004613cb8565b611925565b348015610bfd57600080fd5b50610437610c0c366004613c51565b61199b565b348015610c1d57600080fd5b506104ce61dead81565b606060038054610c3690613ff3565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6290613ff3565b8015610caf5780601f10610c8457610100808354040283529160200191610caf565b820191906000526020600020905b815481529060010190602001808311610c9257829003601f168201915b5050505050905090565b600033610cc78185856119cd565b60019150505b92915050565b610cdb611af1565b610ce3611b4b565b30600090815260208190526040902054821115610d395760405162461bcd60e51b815260206004820152600f60248201526e082dadeeadce840e8dede40d0d2ced608b1b60448201526064015b60405180910390fd5b610d438282611ba4565b610d4d6001600c55565b5050565b610d59611af1565b610d61611b4b565b6014819055610d706001600c55565b50565b610d7b611af1565b610d83611b4b565b610d8c81611d13565b610d706001600c55565b600033610da4858285611ddd565b610daf858585611e57565b60019150505b9392505050565b60608183610dca600d612001565b610dd4919061403d565b811115610df35783610de6600d612001565b610df0919061403d565b90505b60008167ffffffffffffffff811115610e0e57610e0e614050565b604051908082528060200260200182016040528015610e37578160200160208202803683370190505b50905060005b82811015610e8c57610e5a610e528288614066565b600d9061200b565b828281518110610e6c57610e6c614079565b6001600160a01b0390921660209283029190910190910152600101610e3d565b50949350505050565b610e9d611af1565b610ea5611b4b565b610d438282612017565b6000610eb9612176565b905090565b600033610cc7818585610ed183836117fb565b610edb9190614066565b6119cd565b6000610eea611417565b65ffffffffffff168210610f3c5760405162461bcd60e51b815260206004820152601960248201527804552433230566f7465733a20667574757265206c6f6f6b757603c1b6044820152606401610d30565b6001600160a01b0383166000908152600a60205260409020610db590836122a1565b6000610ccd600d8361238a565b610f73611af1565b610f7b611b4b565b610d8c816123ac565b610f8c611af1565b610f94611b4b565b8015610ffe5730600090815260208190526040902054821115610ff95760405162461bcd60e51b815260206004820152601860248201527f4e6f7420656e6f75676820746f6b656e2062616c616e636500000000000000006044820152606401610d30565b611047565b814710156110475760405162461bcd60e51b81526020600482015260166024820152754e6f7420656e6f756768204554482062616c616e636560501b6044820152606401610d30565b6110523083836126e9565b50610d4d6001600c55565b611065611af1565b61106d611b4b565b610d8c61107f368390038301836140a1565b61291d565b60604361108f611417565b65ffffffffffff16146110e45760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a2062726f6b656e20636c6f636b206d6f64650000006044820152606401610d30565b5060408051808201909152601d81527f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000602082015290565b610d703382612b90565b6019546001600160a01b031633146111755760405162461bcd60e51b81526020600482015260126024820152712737ba103a30bc2930ba32aab83230ba32b960711b6044820152606401610d30565b61117d611b4b565b6107d0821180159061119157506107d08111155b6111cc5760405162461bcd60e51b815260206004820152600c60248201526b0a8c2f040e8dede40d0d2ced60a31b6044820152606401610d30565b6015805461ffff83811663010000000264ffff00000019918616610100029190911664ffffffff0019909216919091171781556040517ff34b49a91d91598b7774795175736ebf4db4fa5a4edf72772cf50fb27c135efd9161122d91614161565b60405180910390a1610d4d6001600c55565b6001600160a01b0381166000908152600a6020526040812054610ccd90612c09565b611269611af1565b6112736000612c72565b565b61127d611af1565b611285611b4b565b601380546001600160a01b0319166001600160a01b0383161790556001600c5550565b6001600160a01b038116600090815260076020526040812054610ccd565b6112ce611af1565b6112d6611b4b565b801515601360159054906101000a900460ff161515036113085760405162461bcd60e51b8152600401610d30906141c7565b6013805460ff60a81b1916600160a81b831515021790556001600c5550565b60006060808280808361135b7f00000000000000000000000000000000000000000000000000000000000000006005612cc4565b6113867f00000000000000000000000000000000000000000000000000000000000000006006612cc4565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60006113ba611417565b65ffffffffffff16821061140c5760405162461bcd60e51b815260206004820152601960248201527804552433230566f7465733a20667574757265206c6f6f6b757603c1b6044820152606401610d30565b610ccd600b836122a1565b6000610eb943612d6f565b606060048054610c3690613ff3565b6001600160a01b0381166000908152600a602052604081205480156114a0576001600160a01b0383166000908152600a602052604090208054600019830190811061147e5761147e614079565b60009182526020909120015464010000000090046001600160e01b03166114a3565b60005b6001600160e01b03169392505050565b600033816114c182866117fb565b9050838110156115215760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610d30565b61152e82868684036119cd565b506001949350505050565b600033610cc7818585611e57565b61154f611af1565b611557611b4b565b610d438282612dd6565b834211156115b15760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e617475726520657870697265640000006044820152606401610d30565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b03881691810191909152606081018690526080810185905260009061162b906116239060a00160405160208183030381529060405280519060200120612e6e565b858585612e9b565b905061163681612ec3565b86146116845760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e6365000000000000006044820152606401610d30565b61168e8188612b90565b50505050505050565b834211156116e75760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610d30565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886117168c612ec3565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061177182612e6e565b9050600061178182878787612e9b565b9050896001600160a01b0316816001600160a01b0316146117e45760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610d30565b6117ef8a8a8a6119cd565b50505050505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61182e611af1565b611836611b4b565b601980546001600160a01b0319166001600160a01b0383169081179091556040517f9303ecbbfa9686993e20c6f50ad460bbf48268e45fab9bb5090bd6160f83217590600090a2610d706001600c55565b61188f611af1565b611897611b4b565b610d438282612eeb565b60408051808201909152600080825260208201526001600160a01b0383166000908152600a60205260409020805463ffffffff84169081106118e5576118e5614079565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b61192d611af1565b6001600160a01b0381166119925760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d30565b610d7081612c72565b6119a3611af1565b6119ab611b4b565b610d438282612f83565b6000610db58284614066565b6000610db5828461403d565b6001600160a01b038316611a2f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610d30565b6001600160a01b038216611a905760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610d30565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6018546001600160a01b031633146112735760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d30565b6002600c5403611b9d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d30565b6002600c55565b6013805460ff60a01b1916600160a01b179055306000908152602081905260408120549050828110611d0057601554600090611bed90600160381b900461ffff166127106141ec565b60155461ffff91821691611c0991600160481b90041686614206565b611c139190614233565b90506000611c22600283614233565b90506000611c30838761403d565b90506000611c3e838561403d565b60155490915060ff16611c5857611c558282614066565b90505b8015611cd0576012546001600160a01b0316600090815260208190526040902054600003611c8a575050505050611d02565b47611c9582886130b8565b6000611ca1824761403d565b9050600083611cb08784614206565b611cba9190614233565b90508015611ccc57611ccc8682613209565b5050505b60155460ff1615611ced57611ce7308360016126e9565b50611cfb565b611cf9304760006126e9565b505b505050505b505b50506013805460ff60a01b19169055565b611d1e600d8261238a565b611d5c5760405162461bcd60e51b815260206004820152600f60248201526e2737ba10309031b7b63632b1ba37b960891b6044820152606401610d30565b611d67600d826132bd565b506001600160a01b0381166000908152600f60205260408120546010805491929091611d9490849061403d565b90915550506001600160a01b0381166000818152600f6020526040808220829055517f904316769e154356a5e4aad5d41591b55913c7717fab281d818c1fed7d80e8149190a250565b6000611de984846117fb565b90506000198114611e515781811015611e445760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610d30565b611e5184848484036119cd565b50505050565b6001600160a01b038316611ebb5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610d30565b6001600160a01b038216611f1d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610d30565b6001600160a01b03831660009081526020819052604090205481811015611f955760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610d30565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3611e518484846132d7565b6000610ccd825490565b6000610db583836132e2565b612022600d8361238a565b156120635760405162461bcd60e51b815260206004820152601160248201527020b63932b0b23c9031b7b63632b1ba37b960791b6044820152606401610d30565b603261206f600d612001565b106120b55760405162461bcd60e51b815260206004820152601660248201527513585e0818dbdb1b1958dd1bdc9cc81c995858da195960521b6044820152606401610d30565b600081116120f55760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420736861726560981b6044820152606401610d30565b612100600d8361330c565b506001600160a01b0382166000908152600f602052604081208290556010805483929061212e908490614066565b90915550506040518181526001600160a01b038316907f918584c21fe4a093f5014c0dabaed3e43b642781e27984aef122cae8245fbb23906020015b60405180910390a25050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156121cf57507f000000000000000000000000000000000000000000000000000000000000000046145b156121f957507f000000000000000000000000000000000000000000000000000000000000000090565b610eb9604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b8154600090818160058111156122fb5760006122bc84613321565b6122c6908561403d565b600088815260209020909150869082015463ffffffff1611156122eb578091506122f9565b6122f6816001614066565b92505b505b8082101561234857600061230f8383613409565b600088815260209020909150869082015463ffffffff16111561233457809150612342565b61233f816001614066565b92505b506122fb565b8015612374576000868152602090208101600019015464010000000090046001600160e01b0316612377565b60005b6001600160e01b03169695505050505050565b6001600160a01b03811660009081526001830160205260408120541515610db5565b6001600160a01b0381166123f35760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b2103937baba32b960911b6044820152606401610d30565b601180546001600160a01b0319166001600160a01b0383169081179091556040805163c45a015560e01b815290516000929163c45a01559160048083019260209291908290030181865afa15801561244f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124739190614255565b90506001600160a01b0381166124bd5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c696420666163746f727960881b6044820152606401610d30565b601154604080516315ab88c960e31b815290516000926001600160a01b03169163ad5c46489160048083019260209291908290030181865afa158015612507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252b9190614255565b60405163e6a4390560e01b81523060048201526001600160a01b0380831660248301529192509083169063e6a4390590604401602060405180830381865afa15801561257b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259f9190614255565b601280546001600160a01b0319166001600160a01b03929092169182179055612655576040516364e329cb60e11b81523060048201526001600160a01b03828116602483015283169063c9c65396906044016020604051808303816000875af1158015612610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126349190614255565b601280546001600160a01b0319166001600160a01b03929092169190911790555b6012546001600160a01b03166126a55760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103830b4b91030b2323932b9b99760591b6044820152606401610d30565b6012546011546040516001600160a01b0392831692909116907fca394f95d8dbf1e8b2e76b9a8da90cacce1da85181a65508dab13212dc1df53b90600090a3505050565b60006126f3611b4b565b8215806127005750601054155b1561270d57506000612913565b60008061271a600d612001565b905060005b8181101561290b576000612734600d8361200b565b9050600061274360018561403d565b831461277e576010546001600160a01b0383166000908152600f602052604090205461276f908a614206565b6127799190614233565b612788565b612788858961403d565b9050861561287a576040516001600160a01b03838116602483015260448201839052600091908b169060640160408051601f198184030181529181526020820180516001600160e01b031663a9059cbb60e01b179052516127e99190614272565b6000604051808303816000865af19150503d8060008114612826576040519150601f19603f3d011682016040523d82523d6000602084013e61282b565b606091505b50509050806128745760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610d30565b506128b2565b6040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156128b0573d6000803e3d6000fd5b505b816001600160a01b03167f06c5efeff5c320943d265dc4e5f1af95ad523555ce0c1957e367dda5514572df826040516128ed91815260200190565b60405180910390a26128ff8186614066565b9450505060010161271f565b506001925050505b610db56001600c55565b6107d061ffff16816020015161ffff16111561296d5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206275792066656560881b6044820152606401610d30565b6107d061ffff16816040015161ffff1611156129be5760405162461bcd60e51b815260206004820152601060248201526f496e76616c69642073656c6c2066656560801b6044820152606401610d30565b6107d061ffff16816060015161ffff161115612a135760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964207472616e736665722066656560601b6044820152606401610d30565b60008160c001518260a001518360800151612a2e919061428e565b612a38919061428e565b905061ffff81161580612a50575061ffff8116612710145b612a905760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642066656520736861726560781b6044820152606401610d30565b81516015805460208501516040808701516060880151608089015160a08a015160c08b015162ffffff1990971698151562ffff0019169890981761010061ffff968716021766ffffffff000000191663010000009386169390930266ffff00000000001916929092176501000000000091851691909102176affffffff000000000000001916600160381b918416919091026affff000000000000000000191617600160481b958316959095029490941761ffff60581b1916600160581b9190921602179055517ff34b49a91d91598b7774795175736ebf4db4fa5a4edf72772cf50fb27c135efd90612b849084906142a8565b60405180910390a15050565b6001600160a01b038281166000818152600960208181526040808420805485845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4611e51828483613424565b600063ffffffff821115612c6e5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610d30565b5090565b601880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606060ff8314612cde57612cd783613561565b9050610ccd565b818054612cea90613ff3565b80601f0160208091040260200160405190810160405280929190818152602001828054612d1690613ff3565b8015612d635780601f10612d3857610100808354040283529160200191612d63565b820191906000526020600020905b815481529060010190602001808311612d4657829003601f168201915b50505050509050610ccd565b600065ffffffffffff821115612c6e5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203460448201526538206269747360d01b6064820152608401610d30565b6001600160a01b03821660009081526016602052604090205481151560ff909116151503612e165760405162461bcd60e51b8152600401610d30906141c7565b6001600160a01b038216600081815260166020908152604091829020805460ff191685151590811790915591519182527f3499bfcf9673677ba552f3fe2ea274ec7e6246da31c3c87e115b45a9b0db2efb910161216a565b6000610ccd612e7b612176565b8360405161190160f01b8152600281019290925260228201526042902090565b6000806000612eac878787876135a0565b91509150612eb981613664565b5095945050505050565b6001600160a01b03811660009081526007602052604090208054600181018255905b50919050565b6001600160a01b03821660009081526017602052604090205481151560ff909116151503612f2b5760405162461bcd60e51b8152600401610d30906141c7565b6001600160a01b038216600081815260176020908152604091829020805460ff191685151590811790915591519182527f902b2ea0acdec5a260e398590d055fe29bd61ef5dd41e45db54a4cd98d5569e0910161216a565b612f8e600d8361238a565b612fcc5760405162461bcd60e51b815260206004820152600f60248201526e2737ba10309031b7b63632b1ba37b960891b6044820152606401610d30565b6000811161300c5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420736861726560981b6044820152606401610d30565b6001600160a01b0382166000908152600f6020526040812054601080549192839261303890849061403d565b90915550506001600160a01b0383166000908152600f602052604081208390556010805484929061306a908490614066565b909155505060408051828152602081018490526001600160a01b038516917fd350c3685bdab1285c0b97ffb6e96d96ed0ad4578a135c38250e771e7cb831aa910160405180910390a2505050565b60408051600280825260608201835260009260208301908036833701905050905030816000815181106130ed576130ed614079565b6001600160a01b03928316602091820292909201810191909152601154604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015613146573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316a9190614255565b8160018151811061317d5761317d614079565b6001600160a01b0392831660209182029290920101526011546131a391309116856119cd565b60115460405163791ac94760e01b81526001600160a01b039091169063791ac947906131db9086908690869030904290600401614319565b600060405180830381600087803b1580156131f557600080fd5b505af115801561168e573d6000803e3d6000fd5b6011546132219030906001600160a01b0316846119cd565b60115460135460405163f305d71960e01b81523060048201526024810185905260006044820181905260648201526001600160a01b0391821660848201524260a482015291169063f305d71990839060c40160606040518083038185885af1158015613291573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906132b69190614355565b5050505050565b6000610db5836001600160a01b0384166137ae565b505050565b6132d28383836138a8565b60008260000182815481106132f9576132f9614079565b9060005260206000200154905092915050565b6000610db5836001600160a01b0384166138da565b60008160000361333357506000919050565b6000600161334084613929565b901c6001901b905060018184816133595761335961421d565b048201901c905060018184816133715761337161421d565b048201901c905060018184816133895761338961421d565b048201901c905060018184816133a1576133a161421d565b048201901c905060018184816133b9576133b961421d565b048201901c905060018184816133d1576133d161421d565b048201901c905060018184816133e9576133e961421d565b048201901c9050610db5818285816134035761340361421d565b046139bd565b60006134186002848418614233565b610db590848416614066565b816001600160a01b0316836001600160a01b0316141580156134465750600081115b156132d2576001600160a01b038316156134d4576001600160a01b0383166000908152600a602052604081208190613481906119c1856139d3565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516134c9929190918252602082015260400190565b60405180910390a250505b6001600160a01b038216156132d2576001600160a01b0382166000908152600a60205260408120819061350a906119b5856139d3565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051613552929190918252602082015260400190565b60405180910390a25050505050565b6060600061356e83613b48565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156135d7575060009050600361365b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561362b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166136545760006001925092505061365b565b9150600090505b94509492505050565b600081600481111561367857613678614383565b036136805750565b600181600481111561369457613694614383565b036136e15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610d30565b60028160048111156136f5576136f5614383565b036137425760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610d30565b600381600481111561375657613756614383565b03610d705760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610d30565b600081815260018301602052604081205480156138975760006137d260018361403d565b85549091506000906137e69060019061403d565b905081811461384b57600086600001828154811061380657613806614079565b906000526020600020015490508087600001848154811061382957613829614079565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061385c5761385c614399565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610ccd565b6000915050610ccd565b5092915050565b6001600160a01b038381166000908152600960205260408082205485841683529120546132d292918216911683613424565b600081815260018301602052604081205461392157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ccd565b506000610ccd565b600080608083901c1561393e57608092831c92015b604083901c1561395057604092831c92015b602083901c1561396257602092831c92015b601083901c1561397457601092831c92015b600883901c1561398657600892831c92015b600483901c1561399857600492831c92015b600283901c156139aa57600292831c92015b600183901c15610ccd5760010192915050565b60008183106139cc5781610db5565b5090919050565b82546000908190818115613a205760008781526020902082016000190160408051808201909152905463ffffffff8116825264010000000090046001600160e01b03166020820152613a35565b60408051808201909152600080825260208201525b905080602001516001600160e01b03169350613a5584868863ffffffff16565b9250600082118015613a7f5750613a6a611417565b65ffffffffffff16816000015163ffffffff16145b15613ac457613a8d83613b70565b60008881526020902083016000190180546001600160e01b03929092166401000000000263ffffffff909216919091179055613b3e565b866040518060400160405280613ae8613adb611417565b65ffffffffffff16612c09565b63ffffffff168152602001613afc86613b70565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b5050935093915050565b600060ff8216601f811115610ccd57604051632cd44ac360e21b815260040160405180910390fd5b60006001600160e01b03821115612c6e5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401610d30565b60005b83811015613bf4578181015183820152602001613bdc565b50506000910152565b60008151808452613c15816020860160208601613bd9565b601f01601f19169290920160200192915050565b602081526000610db56020830184613bfd565b6001600160a01b0381168114610d7057600080fd5b60008060408385031215613c6457600080fd5b8235613c6f81613c3c565b946020939093013593505050565b60008060408385031215613c9057600080fd5b50508035926020909101359150565b600060208284031215613cb157600080fd5b5035919050565b600060208284031215613cca57600080fd5b8135610db581613c3c565b600080600060608486031215613cea57600080fd5b8335613cf581613c3c565b92506020840135613d0581613c3c565b929592945050506040919091013590565b600081518084526020840193506020830160005b82811015613d515781516001600160a01b0316865260209586019590910190600101613d2a565b5093949350505050565b602081526000610db56020830184613d16565b80358015158114613d7e57600080fd5b919050565b60008060408385031215613d9657600080fd5b82359150613da660208401613d6e565b90509250929050565b600060e0828403128015613dc257600080fd5b509092915050565b600060208284031215613ddc57600080fd5b610db582613d6e565b60ff60f81b8816815260e060208201526000613e0460e0830189613bfd565b8281036040840152613e168189613bfd565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501528451808252602080870193509091019060005b81811015613e6c578351835260209384019390920191600101613e4e565b50909b9a5050505050505050505050565b60008060408385031215613e9057600080fd5b8235613e9b81613c3c565b9150613da660208401613d6e565b803560ff81168114613d7e57600080fd5b60008060008060008060c08789031215613ed357600080fd5b8635613ede81613c3c565b95506020870135945060408701359350613efa60608801613ea9565b9598949750929560808101359460a0909101359350915050565b600080600080600080600060e0888a031215613f2f57600080fd5b8735613f3a81613c3c565b96506020880135613f4a81613c3c565b95506040880135945060608801359350613f6660808901613ea9565b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215613f9657600080fd5b8235613fa181613c3c565b91506020830135613fb181613c3c565b809150509250929050565b60008060408385031215613fcf57600080fd5b8235613fda81613c3c565b9150602083013563ffffffff81168114613fb157600080fd5b600181811c9082168061400757607f821691505b602082108103612ee557634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610ccd57610ccd614027565b634e487b7160e01b600052604160045260246000fd5b80820180821115610ccd57610ccd614027565b634e487b7160e01b600052603260045260246000fd5b803561ffff81168114613d7e57600080fd5b600060e08284031280156140b457600080fd5b5060405160e0810167ffffffffffffffff811182821017156140e657634e487b7160e01b600052604160045260246000fd5b6040526140f283613d6e565b81526141006020840161408f565b60208201526141116040840161408f565b60408201526141226060840161408f565b60608201526141336080840161408f565b608082015261414460a0840161408f565b60a082015261415560c0840161408f565b60c08201529392505050565b815460ff81161515825261ffff600882901c81166020840152601882901c16604083015260e0820190602881901c61ffff166060840152603881901c61ffff166080840152604881901c61ffff1660a0840152605881901c61ffff1660c08401526138a1565b6020808252600b908201526a105b1c9958591e481cd95d60aa1b604082015260600190565b61ffff8281168282160390811115610ccd57610ccd614027565b8082028115828204841417610ccd57610ccd614027565b634e487b7160e01b600052601260045260246000fd5b60008261425057634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561426757600080fd5b8151610db581613c3c565b60008251614284818460208701613bd9565b9190910192915050565b61ffff8181168382160190811115610ccd57610ccd614027565b600060e08201905082511515825261ffff602084015116602083015261ffff604084015116604083015261ffff606084015116606083015261ffff608084015116608083015260a083015161430360a084018261ffff169052565b5060c08301516138a160c084018261ffff169052565b85815284602082015260a06040820152600061433860a0830186613d16565b6001600160a01b0394909416606083015250608001529392505050565b60008060006060848603121561436a57600080fd5b5050815160208301516040909301519094929350919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fdfea26469706673582212206125785784b28b541e783781c822ad7edd74b964013e36f7f1eb32783b5c04b564736f6c634300081b0033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "DelegateChanged(address,address,address)": {
        "details": "Emitted when an account changes their delegate."
      },
      "DelegateVotesChanged(address,uint256,uint256)": {
        "details": "Emitted when a token transfer or delegate change results in changes to a delegate's number of votes."
      },
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "CLOCK_MODE()": {
        "details": "Description of the clock"
      },
      "DOMAIN_SEPARATOR()": {
        "details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "checkpoints(address,uint32)": {
        "details": "Get the `pos`-th checkpoint for `account`."
      },
      "clock()": {
        "details": "Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting)."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "delegate(address)": {
        "details": "Delegate votes from the sender to `delegatee`."
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Delegates votes from signer to `delegatee`"
      },
      "delegates(address)": {
        "details": "Get the address `account` is currently delegating to."
      },
      "eip712Domain()": {
        "details": "See {EIP-5267}. _Available since v4.9._"
      },
      "getPastTotalSupply(uint256)": {
        "details": "Retrieve the `totalSupply` at the end of `timepoint`. Note, this value is the sum of all balances. It is NOT the sum of all the delegated votes! Requirements: - `timepoint` must be in the past"
      },
      "getPastVotes(address,uint256)": {
        "details": "Retrieve the number of votes for `account` at the end of `timepoint`. Requirements: - `timepoint` must be in the past"
      },
      "getVotes(address)": {
        "details": "Gets the current votes balance for `account`"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
      },
      "numCheckpoints(address)": {
        "details": "Get number of checkpoints for `account`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "[Audit Note - IVotes Integration] Extended from ERC20Votes and ERC20Permit for snapshot-based voting and off-chain vote delegation support (EIP-2612 compliant).",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4755,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4761,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4763,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4765,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 4767,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 9318,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 9320,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 5427,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "_nonces",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(Counter)8296_storage)"
      },
      {
        "astId": 5435,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 5602,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "_delegates",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5608,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "_checkpoints",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)5593_storage)dyn_storage)"
      },
      {
        "astId": 5612,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "_totalSupplyCheckpoints",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Checkpoint)5593_storage)dyn_storage"
      },
      {
        "astId": 4644,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "_status",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 14257,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "_collectors",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(AddressSet)12705_storage"
      },
      {
        "astId": 14261,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "_shares",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14263,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "totalFeeCollectorsShares",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 14750,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "swapRouter",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IUniswapV2Router02)13999"
      },
      {
        "astId": 14752,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "swapPair",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 14754,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "liquidityOwner",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 14756,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "_processingFees",
        "offset": 20,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 14758,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "autoProcessFees",
        "offset": 21,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 14760,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "numTokensToSwap",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 14763,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "feeConfiguration",
        "offset": 0,
        "slot": "21",
        "type": "t_struct(FeeConfiguration)14735_storage"
      },
      {
        "astId": 14767,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "_excludedFromFees",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14771,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "_lpPools",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 396,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "_owner",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      },
      {
        "astId": 13010,
        "contract": "contracts/BSTRToken.sol:BSTRToken",
        "label": "taxRateUpdater",
        "offset": 0,
        "slot": "25",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Checkpoint)5593_storage)dyn_storage": {
        "base": "t_struct(Checkpoint)5593_storage",
        "encoding": "dynamic_array",
        "label": "struct ERC20Votes.Checkpoint[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IUniswapV2Router02)13999": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(Checkpoint)5593_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC20Votes.Checkpoint[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Checkpoint)5593_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Counter)8296_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)8296_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)12705_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 12704,
            "contract": "contracts/BSTRToken.sol:BSTRToken",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)12390_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Checkpoint)5593_storage": {
        "encoding": "inplace",
        "label": "struct ERC20Votes.Checkpoint",
        "members": [
          {
            "astId": 5590,
            "contract": "contracts/BSTRToken.sol:BSTRToken",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5592,
            "contract": "contracts/BSTRToken.sol:BSTRToken",
            "label": "votes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Counter)8296_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 8295,
            "contract": "contracts/BSTRToken.sol:BSTRToken",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(FeeConfiguration)14735_storage": {
        "encoding": "inplace",
        "label": "struct TaxableToken.FeeConfiguration",
        "members": [
          {
            "astId": 14722,
            "contract": "contracts/BSTRToken.sol:BSTRToken",
            "label": "feesInToken",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 14724,
            "contract": "contracts/BSTRToken.sol:BSTRToken",
            "label": "buyFees",
            "offset": 1,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 14726,
            "contract": "contracts/BSTRToken.sol:BSTRToken",
            "label": "sellFees",
            "offset": 3,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 14728,
            "contract": "contracts/BSTRToken.sol:BSTRToken",
            "label": "transferFees",
            "offset": 5,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 14730,
            "contract": "contracts/BSTRToken.sol:BSTRToken",
            "label": "burnFeeRatio",
            "offset": 7,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 14732,
            "contract": "contracts/BSTRToken.sol:BSTRToken",
            "label": "liquidityFeeRatio",
            "offset": 9,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 14734,
            "contract": "contracts/BSTRToken.sol:BSTRToken",
            "label": "collectorsFeeRatio",
            "offset": 11,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)12390_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 12385,
            "contract": "contracts/BSTRToken.sol:BSTRToken",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 12389,
            "contract": "contracts/BSTRToken.sol:BSTRToken",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}